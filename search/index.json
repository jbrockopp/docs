
{ "results": [



    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/environment/",
    "display": "Reference/Yaml/Environment",
    "title": "Environment",
    "content": "the environment tag intended to be used inject global configuration into steps, services secret containers. control of which container types get injected settings available via metadata block. ---# document displaying using with map syntax.# additionally, you can also use array syntax where items in# they are pattern hello=&#34;hello, vela!&#34;environment:hello:&#34;hello, vela!&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/secrets_external/",
    "display": "Usage/Examples/Secrets external",
    "title": "External Secrets",
    "content": "example yaml configuration for project requiring secrets to be used within step scenario user looking create pipeline that can integrate with private vault inject not pushing docker image registry. note: it assumed you have created secret vault_token the web interface cli. examples show using repository secrets. vela contains three types: repository, organization, shared. on organization shared, please see concepts documentation. steps following are being below: pull parameters plugins must stored base of as .vela.yml .vela.yaml recommended pin image: versions production pipelines version:&#34;1&#34;steps:- name:publish hello worldimage:target/vela-docker:latestpull:alwaysparameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# note here how uses an internal vault_token# origin below get additional from an# external service.- name:vault_tokenkey:go-vela/vault_tokenengine:nativetype:org- origin:name:private vaultimage:target/secret-vault:latestpull:alwayssecrets:[vault_token ]parameters:addr:vault.example.comauth_method:tokenusername:octocatitems:- source:secret/dockerpath:dockerstages stages version:&#34;1&#34;worker:runtime:dockerstages:docker:steps:- worldimage:target/vela-docker:latestpull:alwayssecrets:[docker_username, docker_password ]parameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:- source:secret/dockerpath:docker "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/go_modules/",
    "display": "Usage/Examples/Go modules",
    "title": "Go (With Modules)",
    "content": "example yaml configuration for project building go binary with modules. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image environment pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:- name:installimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:- get ./...- name:testimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:- test name:buildimage:golang:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:- buildstages stages needs version:&#34;1&#34;stages:install:steps:- ./...test:needs:[install ]steps:- ./...build:needs:[install build "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/secrets_internal/",
    "display": "Usage/Examples/Secrets internal",
    "title": "Internal Secrets",
    "content": "example yaml configuration for project requiring secrets to be used within step scenario user looking create pipeline that can inject not placed into file. simple would producing docker image with username password. note: it assumed you have created docker_username docker_password the web interface cli. examples show using repository secrets. vela contains three secret types: repository, organization, shared. on organization shared, please see concepts documentation. steps following are being below: pull parameters plugins must stored base of as .vela.yml .vela.yaml recommended pin image: versions production pipelines version:&#34;1&#34;steps:- name:publish hello worldimage:target/vela-docker:latestpull:alwayssecrets:[docker_username, ]parameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:- name:docker_usernamekey:vela/hello-world/docker_usernameengine:nativetype:repo- name:docker_passwordkey:vela/hello-world/docker_passwordengine:nativetype:repostages stages version:&#34;1&#34;stages:docker:steps:- name:docker_passwordkey:vela/hello-world/docker_passwordengine:nativetype:repo "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/mongo/",
    "display": "Usage/Examples/Mongo",
    "title": "Mongo",
    "content": "example yaml configuration for project requiring mongo as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: mongo:latest pull: always steps: check status commands: sleeping help ensure service adequate time start sleep 15 &#34;mongo --host --eval &#34;{ ping: &#34;&#34; detach if you&rsquo;re more granular container you add flag within detach: true "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/postgres/",
    "display": "Usage/Examples/Postgres",
    "title": "Postgres",
    "content": "example yaml configuration for project requiring postgres as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: postgres:latest pull: always environment: postgres_user: admin postgres_db: vela steps: check status commands: sleeping help ensure service adequate time start sleep 15 psql -u -d -h tcp://postgres:5432 detach if you&rsquo;re more granular container you add flag within detach: true "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/redis/",
    "display": "Usage/Examples/Redis",
    "title": "Redis",
    "content": "example yaml configuration for project requiring redis as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: redis:latest pull: always steps: check status commands: sleeping help ensure service adequate time start sleep 15 redis-cli -h ping detach if you&rsquo;re more granular container you add flag within detach: true "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/route/",
    "display": "Usage/Examples/Route",
    "title": "Route",
    "content": "example yaml configuration for project requiring specific runtime platform. scenario user looking to create pipeline that can only run within docker runtime. note: work with your server administer understand what routes are available installation steps the following concepts being used below: worker platform image pull commands must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;worker:platform:dockersteps:- name:view nameimage:alpine:latestpull:alwayscommands:- echo &#34;hello ${build_host} worker!!&#34;stages stages environment version:&#34;1&#34;worker:platform:dockerstages:docker:steps:- worker!!&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/rust_cargo/",
    "display": "Usage/Examples/Rust cargo",
    "title": "Rust (With Cargo)",
    "content": "example yaml configuration for project building rust binary with cargo. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:- name:fetchimage:rust:latestpull:alwayscommands:- cargo fetch --verbose --all- name:testimage:rust:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:- test name:buildimage:rust:latestpull:alwaysenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:- build --allstages stages needs version:&#34;1&#34;stages:fetch:steps:- --alltest:needs:[fetch ]steps:- name:testimage:rust:latestpull:alwayscommands:- --allbuild:needs:[fetch name:buildimage:rust:latestpull:alwayscommands:- --all "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/step/",
    "display": "Docs/Tour/Step",
    "title": "Step",
    "content": "step declaration allows you to provide execution instructions for pipeline. the following displaying an example of minimal configuration executing simple echo linux command. name: tag unique identifier throughout lifecycle execution. when commands: are provided they converted shell script executed as docker entrypoint container. step, commands inside container entrypoint.# if any command returns non-zero exit code, fails exits.- name:welcomeimage:alpinecommands:- &#34;welcome vela docs&#34;#!/bin/sh set -e docs&#34; run --entrypoint=build.sh alpine:latest references: name:, image:, commands:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/version/",
    "display": "Reference/Yaml/Version",
    "title": "Version",
    "content": "the version tag intended to be used order issue warnings for deprecated features breaking changes within yaml document. ---# document displaying using file.version:&#34;1&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/image/",
    "display": "Docs/Tour/Image",
    "title": "Image",
    "content": "all vela steps will require an image declaration to be provided. the image: tag key component that defines docker you want executed during step. default behavior for worker pull if it not present on host. daemon&rsquo;s cache layers locally, by allowing use can get advantage of faster build start up times. sometimes isn&rsquo;t desired always pulled at specific point pipeline lifecycle. that&rsquo;s when pull: set policy how/when interaction should treated. expand your knowledge with example! below syntaxes would image.image:alpineimage:alpine:latestimage:alpine:3image:library/alpine:3image:index.docker.io/library/alpineimage:index.docker.io/library/alpine:3# telling beginning always.- name:always imageimage:alpinepull:alwayscommands:- echo &#34;welcome docs&#34;# just before executing step- name:pull startimage:alpinepull:on_startcommands:- docs&#34; references: name:, image:, pull:, commands:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/java_gradle/",
    "display": "Usage/Examples/Java gradle",
    "title": "Java (With Gradle)",
    "content": "example yaml configuration for project building java application with gradle. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image environment pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:- name:installimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false -dorg.gradle.workers.max=1 -dorg.gradle.parallel=falsecommands:- gradle downloaddependencies- name:testimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false test- name:buildimage:gradle:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false buildstages stages needs version:&#34;1&#34;stages:install:steps:- downloaddependenciestest:needs:[install ]steps:- testbuild:needs:[install build "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/java_maven/",
    "display": "Usage/Examples/Java maven",
    "title": "Java (With Maven)",
    "content": "example yaml configuration for project building java application with maven. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image environment pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:- name:installimage:maven:latestpull:alwayscommands:- mvn install- name:testimage:maven:latestpull:alwayscommands:- test- name:buildimage:maven:latestpull:alwayscommands:- packagestages stages needs version:&#34;1&#34;stages:install:steps:- installtest:needs:[install ]steps:- name:testimage:maven:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false -dorg.gradle.workers.max=1 -dorg.gradle.parallel=falsecommands:- testbuild:needs:[install name:buildimage:maven:latestpull:alwaysenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false package "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/metadata/",
    "display": "Reference/Yaml/Metadata",
    "title": "Metadata",
    "content": "the metadata tag intended to be used during compile phase signal how treat yaml document. ---# document displaying all available tags# their default state for process.metadata:template:falseclone:truetags required type description template bool enables compiling pipeline as template. clone injecting process. usage template: tip: learn write templates, see documentation. ---metadata:# value defaulted &#34;false&#34; if not explicitly provided by user.template:truethe clone: processclone:truethe environment: default, below populated into every with# services, steps, secrets. but, when block exists the# configuration specified phase.environment:[steps, secrets "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/examples/node/",
    "display": "Usage/Examples/Node",
    "title": "Node",
    "content": "example yaml configuration for project building node application. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:- name:installimage:node:latestpull:alwayscommands:- install- name:lintimage:node:latestpull:alwayscommands:- test- name:buildimage:node:latestpull:alwayscommands:- buildstages stages needs version:&#34;1&#34;stages:install:steps:- installtest:needs:[install ]steps:- name:testimage:node:latestpull:alwayscommands:- testbuild:needs:[install build "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/rulesets/",
    "display": "Docs/Tour/Rulesets",
    "title": "Rulesets",
    "content": "the ruleset allows you to provide conditions limit execution of container. when push your code source control management system payload sent vela. within that contains characteristics about what just happened. maybe it was main branch, feature branch tag on any specific commit. gives ability add step tell vela should be executed. name:welcome# would scope only executing# under occurredruleset:event:pushbranch:mainimage:alpinecommands:- echo &#34;welcome docs&#34;- never occurredruleset:unless:event:pushbranch:mainimage:alpinecommands:- docs&#34;tag references: name:, ruleset:,image:, commands:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/worker/",
    "display": "Reference/Yaml/Worker",
    "title": "Worker",
    "content": "the worker tag intended to be used route build specific pool of workers available with vela queue. ---# document displaying all tags# routing &#34;sm:docker&#34;.worker:flavor:smplatform:docker warning: routes are defined by system administrators during installation. know what for your installation, we recommend consulting administrators. tags required type description flavor string indicates worker. (i.e. sm, m, lg) platform docker, k8s) usage tip: see an example on how build. flavor: ---worker:# lg). if not specified# will scheduled generic &#34;vela&#34; queue.flavor:smthe platform: k8s). queue.platform:docker "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/environment/",
    "display": "Docs/Tour/Environment",
    "title": "Environment",
    "content": "to define environment variables scoped step you can add an environment: yaml tag. every step&rsquo;s isolated each individual all platform get injected with custom vela_ prefix pattern. vela does import library provide partial string operations. use the functions manipulate values prior substitution. substitution should be aware ${variable} expressions are subject pre-processing. if want avoid behavior escape your pre-processor evaluations. expand knowledge example! using name:vela envimage:alpinecommands:- echo ${vela_repo_full_name}- name:custom user envimage:alpineenvironment:message:hello, worldcommands:- ${message}- name:string operationimage:alpinecommands:# &#34;:0:8&#34; shorthand will cut value of commit# down just first through characters sha.- ${vela_build_commit:0:8} tag references: name:, image:, environment:, commands:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/templates/",
    "display": "Reference/Yaml/Templates",
    "title": "Templates",
    "content": "the template tag intended to be used identify where retrieve templates during compiler phase of pipeline. ---# document displaying all required tags# pull from remote system.templates:- name:examplesource:github.com/go-vela/templates/example.ymltype:github tags type description name string indicates unique identifier for template. source path system. which version use. format language within file. usage tip: learn how write templates, see documentation name: templates:# identifier# then can step expand template.- name:examplethe source: path# should always raw repository. by default pulled branch on repository# but overwritten adding &#34;@&#34; symbol path.source:github.com/go-vela/templates/example.ymlthe type: use.type:githubthe format: templates:- name:examplesource:github.com/go-vela/templates/example.ymltype:github# default# will &#34;go&#34; accepts following values: go, golang, starlarkformat:starlark "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/authentication/",
    "display": "Reference/Api/Authentication",
    "title": "Authentication",
    "content": "overview authentication for the vela api responsibility of client initiating request. each request requires token to be provided as an authorization http header. content header should using bearer &lt;token&gt; scheme. authorization: more information, you can visit swagger documentation. format tokens are based off json web (a.k.a. jwt) standard. broken down into distinct sections, separated by periods (.): metadata about type signing algorithm used payload data claims) providing additional information signature encoded string header, secret syntax header.payload.signature sample xxxxx.yyyyy.zzzzz jwt introduction curl -x get -h &#34;authorization: &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/install/",
    "display": "Reference/Cli/Install",
    "title": "Install",
    "content": "please keep mind your operating system (os) when referring to the installation instructions below. macos homebrew recommended method for installing vela cli on mac. add tap brew configuration go-vela/vela update taps install curl download binary -l https://github.com/go-vela/cli/releases/latest/download/vela_darwin_amd64.tar.gz tar zx copy $path sudo cp /usr/local/bin/ linux https://github.com/go-vela/cli/releases/latest/download/vela_linux_amd64.tar.gz windows utility must be installed before following command prompt https://github.com/go-vela/cli/releases/latest/download/vela_windows_amd64.tar.gz --output vela_windows_amd64.tar.gz unzip tarball xzvf c: system32/vela.exe powershell -outfile (powershell core) from source intended developers advanced users only. section assumes you have already setup golang. golang, review documentation. repo go get -d github.com/go-vela/cli change directory cd ${gopath}/src/github.com/go-vela/cli build release with -o releases/vela "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/plugins/",
    "display": "Docs/Tour/Plugins",
    "title": "Plugins",
    "content": "plugin docker container that designed to perform set of pre-defined actions. these actions can be for any number general tasks, deploying code, publishing artifacts more. anyone create use it their pipeline. the registry existing plugins found on site tab. within parameters block tags are injected as upper case environment variables with pattern parameter_&lt;yaml_tag&gt;. expand your knowledge an example! working steps:- name:publish hello worldimage:target/vela-kaniko# injected:# parameter_registry=index.docker.io# parameter_repo=index.docker.io/go-vela/hello-world# parameter_username=moby# parameter_password=mypassword# parameter_tags=latest,v1.0.0parameters:registry:index.docker.iorepo:index.docker.io/go-vela/hello-worldusername:mobypassword:mypasswordtags:- latest- v1.0.0tag references: name:, image:, parameters:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/services/",
    "display": "Reference/Yaml/Services",
    "title": "Services",
    "content": "the services tag intended to be used run applications alongside pipeline. ---# document displaying all required tags# postgres database for duration of pipeline.services:- name:postgresimage:postgres:latesttags type description name string unique identifier container pipeline image docker create an ephemeral pull declaration configure if when pulled environment map entrypoint []string commands execute inside ports list ulimits set user limits container. usage name: ---services:# pipeline.- name:postgresthe image: container.- image:postgres:latestthe pull: pulled.# by default, compiler will inject but accepts following values: always, never, no_present, on_start, pull:alwaysthe environment: variables injected into environment# using style syntax.- environment:db_name:vela---services:# array environment:- db_name=velathe entrypoint: entrypoint:- some/path/sql-init.sql- /some/binary/postgresthe ports: ports:- &#34;8080:5432&#34;the ulimits: ---steps:# ulimits:- name:foosoft:1024- name:barsoft:1024hard:2048the user: with foo user.- user:foo "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/cloning/",
    "display": "Docs/Tour/Cloning",
    "title": "Cloning",
    "content": "vela will clone your repository automatically before executing the pipeline. injects credentials that are oauth2 token associated with to authenticate. however, sometimes you may need customize, override disable default behavior. expand knowledge an example! understanding workspace below displaying behavior occurs metadata:clone:truesteps:# since clone, we can instantly access# files our repository.- name:view pipeline fileimage:alpinecommands:- cat .vela.yml# how turn off behavior.metadata:clone:falsesteps:# now turned off; use any docker# image git installed manually repo# specific settings for name:cloneimage:target/vela-gitparameters:path:hello-worldref:refs/heads/masterremote:https://github.com/octocat/hello-world.gitsha:7fd1a60b01f91b314f59955a4e4d4e80d8edf11dtag references: clone:, name:, image:, parameters:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/steps/",
    "display": "Reference/Yaml/Steps",
    "title": "Steps",
    "content": "the steps tag intended to be used run sequential tasks pipeline. ---# document displaying all required tags# postgre database for duration of pipeline.steps:- name:hello worldimage:alpine:latestcommands:- echo &#34;hello, vela user&#34;tags type description name string unique identifier container image docker create ephemeral container. pull declaration configure if when pulled. secrets struct sensitive variables injected into environment. environment map ruleset conditions limit execution parameters extra configuration specific plugin. commands []string instructions inside template expand entrypoint execute detach detached (headless) state. volume mount volumes ulimits set user limits privileged with privileges. usage name: ---steps:# pipeline.- worldthe image: image:alpine:latestthe pull: pulled.# by default, compiler will inject value not_present but# accepts following values: always, never, not_present, on_start- pull:alwaysthe secrets: container# as upper case env. i.e. git_username=vela- secrets:[git_username ]---steps:# git_username=&lt;secret_value&gt; secrets:# source &#34;name:&#34; secret within the# parent &#34;secrets:&#34; yaml tag- source:username# target desired key accessible during# runtime.target:git_usernamethe environment: environment# using style syntax.- environment:db_name:vela---steps:# an array environment:- db_name=velathe ruleset: rules can branch build. comment request body. event path workspace files repo status reference deployment ---steps:- ruleset:# shown below step build# stage master.branch:[stage, master ]---steps:- extends ability start new builds through interactions# request. “run build”# added bottom request.comment:[&#34;run build&#34;]---steps:- push pull_request. available events are:# comment, push, pull_request, tag, deployment.event:[push, pull_request file readme.md, any *.md# root directory test/* has changed.path:[readme.md, &#34;*.md&#34;, &#34;test/*&#34; exists github# organization go-vela/docs repository.repo:[&#34;target/*&#34;,&#34;go-vela/docs&#34;]---steps:- build failure success.status:[failure, success ref dev/* test/*.tag:[dev/*, production.# only compatible events.target:[dev/*, ]the controls modify behavior evaluation: options continue enables continuing fails. true, false matcher use evaluating ruleset. filepath, regexp operator and, must match. branch, event, path, repo, status, unless overwrite vela&#39;s default to# allow pipeline fails.continue:true---steps:- filepath instead evaluate regex. available# matchers are: regexp.# note: uses go&#39;s package. you find documentation# at https://golang.org/pkg/regexp/syntax/matcher:regexpbranch:foo- d---steps:- &#34;or&#34; comparing rules.# operators or.operator:or---steps:- tell execute# push.if:branch:masterevent:push---steps:- ruleset# not push.unless:branch:masterevent:pushthe parameters: tags are parameter_&lt;tag_name&gt;.# plugin that needs two fields:# parameter_registry=index.docker.io# parameter_repo=octocat/hello-world,go-vela/docs- parameters:registry:index.docker.iorepo:[go-vela/hello-world, commands: entrypoint:- world&#34;the template: injection: vars template:# step. map# existing &#34;template&#34; tag.name:example---steps:- template. any# primitive complex types but corresponding template# understand how those templates used.vars:tags:[latest, &#34;1.14&#34;, &#34;1.15&#34; ]pull_policy:alwayscommands:test:&#34;go test ./...&#34;build:&#34;go ./...&#34;the entrypoint: container.- /bin/pwd- /bin/lsthe detach: similar &#34;services:&#34; throughout# detach:truethe volume: volume:- source:/foo- source:/foodestination:/bar- source:/foodestination:/foobaraccess_mode:ro---steps:# volume:[/foo, /foo:/bar, /foo:/foobar:ro ulimits: ulimits:- name:foosoft:1024- name:barsoft:1024hard:2048the privileged: privileges.- privileged:truethe user: foo user.- user:foo "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/secrets/",
    "display": "Docs/Tour/Secrets",
    "title": "Secrets",
    "content": "sometimes you need to inject environment information into an image plugin that don&rsquo;t want plain text. for this, we introduce pipeline secrets as pattern keep sensitive data safe. are always retrieved at the beginning of before any services, stages, steps created started. they answer when don’t provide let&rsquo;s go back our docker used within tutorial focus only on repository type. can learn about all secret types internal example. looking shows few different patterns how leverage adding aliasing your pipeline. however, time going remove username: password: yaml tags parameter: block replace them with container environment. see it action examples! external steps:- name:publish hello worldimage:target/vela-kaniko# here simply just match key then# starts will get &#34;docker_password=&lt;value&gt;&#34;# environmentsecrets:[docker_password ]parameters:registry:index.docker.iorepo:index.docker.io/go-vela/hello-worldusername:mobytags:- latest- v1.0.0- now lets try something more complicated let&#39;s say to# alias secret. do via source target syntax# where new name env var.secrets:- source:passwordtarget:docker_password- source:docker_usernametarget:docker_usernameparameters:registry:index.docker.iorepo:index.docker.io/go-vela/hello-worldtags:- v1.0.0secrets:# notice don&#39;t match.# gives end users ability reuse rename with# names across their various pipelines. similar# above, but allows entire pipeline.- name:docker_usernamekey:go-vela/docs/usernameengine:nativetype:repotag references: (step) secrets:, (parent) "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/stages/",
    "display": "Reference/Yaml/Stages",
    "title": "Stages",
    "content": "the stages tag intended to be used parallelize one-to-many sets of step tasks. ---# document displaying all required tags# run two with one task parallel.stages:test:hello:- name:hello worldimage:alpine:latestcommands:- echo &#34;hello, vela user&#34;welcome:steps:- name:welcome velaimage:alpine:latestcommands:- &#34;welcome vela!&#34;tags type description name string unique identifier for stage pipeline steps []string sequential execution instructions needs that must complete before starting current usage name: ---stages:# pipeline.welcome:the steps: pipeline.welcome:# stage.steps:the tip: more details on tags, see tags documentation ---stages:greeting:# one.needs:[greeting "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/yaml/secrets/",
    "display": "Reference/Yaml/Secrets",
    "title": "Secrets",
    "content": "the secret tag intended to be used pull secrets from vela server execute plugins write external build volume. ---# document displaying all required tags# various types.secrets:# below declarative definitions.- name:foo1key:go-vela/docs/foo1engine:nativetype:repo- name:foo2key:go-vela/foo2engine:nativetype:org- name:foo3key:go-vela/admins/foo3engine:nativetype:shared- name:vault_tokenkey:go-vela/vault_tokenengine:nativetype:org# executing plugin.- origin:name:external vault secretimage:target/secret-vault:latestsecrets:[vault_token ]parameters:addr:vault.company.comauth_method:tokenusername:velatoken:sometokenitems:- source:secret/velapath:usertags type description name string of reference pipeline. key path fetch storage backend. engine backend from. origin struct declaration non-internal providers. name: ---secrets:# pipeline.- name:postgresthe key: tip: unique you need follows pattern ensure repo has proper authorization use secret. by type: //&lt;some_name&gt; org /&lt;some_name&gt; shared /&lt;team_with_org&gt;/&lt;some_name&gt; a# secret.- key:go-vela/docs/foo1# key:go-vela/foo1# key:go-vela/admins/foo1the engine: know what engines are available for your installation, we recommend consulting system administrators. from, &#34;native&#34; signifies# provide it database.- engine:nativethe backend.# default, can but accepts the# following values: repo, org, shared- type:repothe origin: identifier container image []string docker create an ephemeral container. configure if when pulled. sensitive variables injected into environment. environment map ruleset conditions limit execution parameters extra configuration specific plugin. effort reduce duplicate documentation, see comparable step tags documentation learn how set details on behavior. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/services/",
    "display": "Docs/Tour/Services",
    "title": "Services",
    "content": "declaration allows you to provide detached (headless) container for the duration of pipeline. services are always ran, parallel alongside ephemeral steps they extremely useful when your testing requires additional such as cache, database queue. created at beginning pipeline order defined. name: field service defines what hostname will available communicate other tasks however, there times need more control over created. perhaps dealing with that has start up dependencies needs something before started. see it action examples! mongo postgres redis services:# starting set execution- name:cacheimage:redis- name:databaseimage:mongoversion:&#34;1&#34;services:# name:cacheimage:redissteps:- name:ping cacheimage:rediscommands:- redis-cli -h cache ping# now we know started execute another directly workflow- name:databaseimage:postgresdetach:true$ vela exec ... [service: cache] 1:c 02 feb 2021 21:24:10.600 oo0ooo0ooo0oo version=6.0.10, bits=64, commit=00000000, modified=0, pid=1, just warning: config file specified, using default config. specify use redis-server /path/to/redis.conf 1:m 21:24:10.602 running mode=standalone, port=6379. 21:24:10.603 tcp backlog setting 511 cannot be enforced because /proc/sys/net/core/somaxconn lower value 128. server initialized ready accept connections [stage: ][step: ping pong tag references: name:, image:, detach:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/steps/",
    "display": "Docs/Tour/Steps",
    "title": "Steps",
    "content": "steps pipeline designed to run sequential set of tasks. these pipelines do not have minimum defined length will always execute the order defined. each step shown with required yaml tags step. both are pulling alpine linux image from docker hub executing echo statements. see it action examples! go rust gradle maven node version:&#34;1&#34;# pipeline, commands executed inside container as entrypoint.# if any command returns non-zero exit code, fails exits.steps:- name:greetingimage:alpinecommands:- &#34;hello, world&#34;- name:welcomeimage:alpinecommands:- &#34;welcome vela docs&#34;$ exec ... [stage: ][step: greeting] world&#34; hello, world welcome] docs&#34; welcome docs tag references: name:, image:, commands:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/authentication/",
    "display": "Reference/Cli/Authentication",
    "title": "Authentication",
    "content": "overview authentication with the vela cli responsibility of client initiating request. each request requires server address. you can provide variable to three ways: configuration file environment flag recommended method for providing api address cli. default path be found $home/.vela/config.yml. log in: syntax login --api.addr &lt;vela url&gt; example https://vela-server.localhost confirm via browser prompt: open your complete (press enter confirm): generate update complete. continue save (existing config will overwritten): more information, visit documentation. variables configure vela_addr variable: export vela_addr=https://vela-server.localhost two prompts as stated above: it&rsquo;s add these terminal profile (~/.bashrc ~/.zshrc) flags "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/stages/",
    "display": "Docs/Tour/Stages",
    "title": "Stages",
    "content": "stages pipelines are designed to parallelize one-to-many sets of step tasks. by design all the will run at same time unless user uses needs: yaml tag control flow stage executions. these do not have minimum defined length always execute steps within order defined. on host so it&rsquo;s important take into consideration size worker running your builds. pipeline both trigger independently other. pulling alpine linux image from docker hub executing echo statements. see it action with examples! go rust gradle maven node version:&#34;1&#34;# pipeline, commands executed inside container as entrypoint.# if any command returns non-zero exit code, fails exits.stages:greeting:steps:- name:greetingimage:alpinecommands:- &#34;hello, world&#34;welcome:steps:- name:welcomeimage:alpinecommands:- &#34;welcome vela docs&#34;$ exec ... [stage: greeting][step: greeting] world&#34; hello, world welcome][step: welcome] docs&#34; welcome docs references: name:, image:, commands:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/tour/templates/",
    "display": "Docs/Tour/Templates",
    "title": "Templates",
    "content": "templates help to create reusable workflows order make grouping tasks like building deploying code. can solve duplicative single workflow be leveraged by any number of pipelines across multiple workflows. pipeline each step shown with the minimum required yaml tags execute step. both steps are pulling alpine linux image from docker hub executing echo statements. expand your knowledge deep dive! version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:- name:test versionstemplate:name:samplevars:images:[golang:1.16, golang:1.15, golang:1.14 ]- name:build binaryimage:alpinecommands:- &#34;hello, world&#34; tag references: templates:, vars:, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/validate/",
    "display": "Reference/Cli/Validate",
    "title": "Validate",
    "content": "command has been moved to vela validate pipeline. for more information, please see the documentation "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/version/",
    "display": "Reference/Cli/Version",
    "title": "Version",
    "content": "command vela version sample section assumes you have already installed setup the cli. to install cli, please review installation documentation. authentication request response canonical: v0.7.0, major: 0, minor: 7, patch: metadata: architecture: amd64, builddate: 2021-02-01t15:40:21z, compiler: gc, gitcommit: 6225623858e09b7277f3d274d1ed75289a9eb549, goversion: go1.15.7, operatingsystem: darwin, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/build/add/",
    "display": "Api/Build/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;author&#34;: &#34;octokitty&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;event&#34;: &#34;push&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;sender&#34;: &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: https://github.com/github/octocat&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/deployment/add/",
    "display": "Api/Deployment/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/deployments/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;ref&#34;: &#34;master&#34;, &#34;target&#34;: &#34;production&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/hook/add/",
    "display": "Api/Hook/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/hooks/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;status&#34;: &#34;success&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat&#34; response &#34;id&#34;: &#34;repo_id&#34;: &#34;build_id&#34;: &#34;created&#34;: &#34;1563474076&#34;, &#34;error&#34;: &#34;&#34;, &#34;success&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/repo/add/",
    "display": "Api/Repo/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;counter&#34;: 0, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/secret/add/",
    "display": "Api/Secret/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/secrets/:engine/:type/:org/:name parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;bar&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, null, &#34;type&#34;: &#34;repo&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/service/add/",
    "display": "Api/Service/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build/services parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;name&#34;: &#34;clone&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services&#34; response &#34;id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/step/add/",
    "display": "Api/Step/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build/steps parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;name&#34;: &#34;clone&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps&#34; response &#34;id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/user/add/",
    "display": "Api/User/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;name&#34;: &#34;octokitty&#34;, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; response &#34;id&#34;: 1, &#34;token&#34;: null, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/deployment/add/",
    "display": "Cli/Deployment/Add",
    "title": "Add",
    "content": "command vela add deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, deployment_org repo repository vela_repo, deployment_repo ref branch, commit, tag vela_deployment, deployment_number target vela_target, deployment_target short vela_description, deployment_description parameter parameter(s) key=value format vela_parameters,, deployment_parameters task vela_task, deployment_task output vela_output, deployment_output also supports setting via configuration file: please review cli config documentation. sample section assumes have already installed setup cli. install cli, installation authentication request with &#34;github&#34; &#34;octocat&#34; --org github --repo octocat response generated from successful &#34;https://api.github.com/repos/github/octocat/deployments/1&#34; was created examples examples: 1. repository. myorg myrepo 2. specific environment. --target stage 3. branch reference. --ref dev 4. commit 48afb5bdc41ad69bf22588491333f7cf71135163 5. description. --description &#39;my custom message&#39; 6. two parameters. --parameter &#39;key=value&#39; &#39;foo=bar&#39; 7. when set. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/repo/add/",
    "display": "Cli/Repo/Add",
    "title": "Add",
    "content": "command vela add repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name link full url vela_link, repo_link branch default vela_branch, repo_branch clone vela_clone, repo_clone visibility access level required view vela_visibility, repo_visibility timeout max time allowed per build vela_timeout, repo_timeout counter set value new number vela_counter, repo_counter private disables public vela_private, repo_private trusted elevates permissions builds vela_trusted, repo_trusted active enables/disables vela_active, repo_active event events trigger vela_events, repo_events output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 visibility: private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/secret/add/",
    "display": "Cli/Secret/Add",
    "title": "Add",
    "content": "command vela add secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. note on special characters: certain characters may require to encapsulate your with &quot; '. have be double escaped parameters the following are used configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name value vela_value, secret_value image build image(s) access vela_images, secret_images event event(s) vela_events, secret_events commands allows step vela_commands, secret_commands file secret(s) vela_file, secret_file output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo --value bar response &#34;foo&#34; was added advanced input from creating single-line multi-line using symbol. syntax @/path/to/file example @$home/tmp/secret.txt secrets multiple filename parameter. -f secret.yml single yaml document ---metadata:version:v1engine:nativesecrets:- org:octocatrepo:githubname:foovalue:bartype:repoimages:- golang:latestevents:- push- pull_request- org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:- pull_requestmultiple org:githubrepo:octocatname:foovalue:bartype:repoimages:- pull_request---metadata:version:v1engine:vaultsecrets:- pull_request "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/starlark/anatomy/",
    "display": "Tutorials/Starlark/Anatomy",
    "title": "Anatomy",
    "content": "anatomy order to make starlark work with vela&rsquo;s templates functionality we did have few design decisions on behalf of the users. all must contain main function that returns pipeline illustrated below example file contains def main(ctx) data structure valid pipeline. main(ctx): return &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: &#39;name&#39;: &#39;build&#39;, &#39;image&#39;: golang:latest, &#39;commands&#39;: &#39;go build&#39;, test&#39;, }, ], context used by compiler pass information template will inject user variables defined parent compile time platform variables. both sets are injected into within dictionary structure. syntax: ctx['vela']['&lt;resource&gt;']['&lt;name&gt;'] repo ctx[&#34;vela&#34;][&#34;repo&#34;][&#34;full_name&#34;] &#34;go build %s&#34; %, repo, ctx['vars'][&lt;name&gt;] image ctx[&#39;vars&#39;][&#39;image&#39;] image, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/artifactory/",
    "display": "Registry/Pipeline/Artifactory",
    "title": "Artifactory",
    "content": "description plugin enables you to manage artifacts artifactory vela pipeline. source code: https://github.com/go-vela/vela-artifactory registry: https://hub.docker.com/r/target/vela-artifactory usage note: users should refrain from using latest as the tag for docker image. it recommended use semantically versioned instead. sample of copying an artifact: steps:- name:copy_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:copypath:libs-snapshot-local/foo.txttarget:libs-snapshot-local/bar.txturl:http://localhost:8081/artifactorysample deleting name:delete_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:deletepath:libs-snapshot-local/foo.txturl:http://localhost:8081/artifactorysample setting properties on name:set_properties_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:set-proppath:libs-snapshot-local/foo.txtprops:- name:singlevalue:foo- name:multiplevalues:- bar- bazurl:http://localhost:8081/artifactorysample uploading name:upload_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:uploadpath:libs-snapshot-local/sources:- foo.txt- target/*.jar- dist/**/*.jsurl:http://localhost:8081/artifactorysample pretending upload steps: name: upload_artifacts image: target/vela-artifactory:latest pull: always parameters: action: dry_run: true path: libs-snapshot-local/ sources: foo.txt target/*.jar dist/**/*.js url: http://localhost:8081/artifactory docker-promote name:docker_promote_artifactsimage:target/vela-artifactory:latestpull:alwaysparameters:action:docker-promotetarget_repo:libs-snapshot-localdocker_registry:octocat/hello-worldtag:latesttarget_docker_registry:octocat/hello-worldtarget_tags:&#34;${vela_build_commit:0:8}&#34;secrets configuring sensitive information your pipeline plain text. internal accepts following parameters authentication: parameter environment variable configuration api_key parameter_api_key, artifactory_api_key password parameter_password, artifactory_password username parameter_username, artifactory_username can secrets substitute these values at runtime: copy_artifacts secrets: artifactory_username, copy libs-snapshot-local/foo.txt target: libs-snapshot-local/bar.txt username: octocat password: supersecretpassword example will add step variables: artifactory_username=&lt;value&gt; artifactory_password=&lt;value&gt; external files file /vela/parameters/artifactory/api_key, /vela/secrets/artifactory/api_key /vela/parameters/artifactory/password, /vela/secrets/artifactory/password /vela/parameters/artifactory/username, /vela/secrets/artifactory/username read secret build workspace stored /vela/secrets/artifactory/* supports reading all via: variables parameter_* artifactory_* /vela/parameters/artifactory/* any set takes precedence over environment. are used configure name required default action perform against n/a parameter_action artifactory_action api key communication with false parameter_api_key dry_run parameter_dry_run artifactory_dry_run log_level log level info parameter_log_level artifactory_log_level parameter_password url instance communicate parameter_url artifactory_url user parameter_username flat removing directory hierarchy parameter_flat artifactory_flat path artifact(s) parameter_path artifactory_path recursive sub-directories parameter_recursive artifactory_recursive target parameter_target artifactory_target delete instead moving image parameter_copy artifactory_copy docker_registry registry parameter_docker_registry artifactory_docker_registry promote_props promoted artifact parameter_promote_props artifactory_promote_props promoting parameter_tag artifactory_tag target_docker_registry parameter_target_docker_registry artifactory_target_docker_registry target_repo containing parameter_target_repo artifactory_target_repo target_tags final tags after promotion parameter_target_tags artifactory_target_tags set-prop props parameter_props artifactory_props include_dirs including parameter_include_dirs artifactory_include_dirs regexp sources regular expression parameter_regexp artifactory_regexp list parameter_sources artifactory_sources template coming soon! troubleshooting start by tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/authenticate/",
    "display": "Docs/Usage/Authenticate",
    "title": "Authenticate",
    "content": "warning these docs assume you have vela running. ui navigate to your deployed instance follow the oauth workflow presented on web interface. cli please see authentication reference. if not yet installed cli, install reference first. api sdk "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/badge/",
    "display": "Docs/Usage/Badge",
    "title": "Badges",
    "content": "note: these docs assume you have vela running. how to get your badge the server has an endpoint that will return svg for default branch of repo. syntax https://&lt;vela server&gt;/badge/&lt;org&gt;/&lt;repo&gt;/status.svg example https://vela-server.localhost/badge/octocat/hello-world/status.svg addition can specify which want by supplying ?branch= query parameter url. server&gt;/badge/&lt;org&gt;/&lt;repo&gt;/status.svg?branch=&lt;branch name&gt; https://vela-server.localhost/badge/octocat/hello-world/status.svg?branch=not_master embedding markdown embed formatted file, follow example: [![build status](https://&lt;vela server&gt;/badge/&lt;org&gt;/&lt;repo&gt;/status.svg)](https://&lt;vela server&gt;/badge/&lt;org&gt;/&lt;repo&gt;) status](https://vela-server.localhost/badge/octocat/hello-world/status.svg)](https://vela-server.localhost/badge/octocat/hello-world) "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/tutorials/bash/",
    "display": "Plugins/Tutorials/Bash",
    "title": "Bash",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from bash documentation: the gnu project&rsquo;s shell. bourne an sh-compatible shell incorporates useful features korn (ksh) (csh). it intended conform ieee posix p1003.2/iso 9945.2 tools standard. offers functional improvements over sh for both programming interactive use. addition, most scripts can run by without modification. code plugin using bash, we&rsquo;ll need first decide what task want accomplish. example, we&rsquo;re going script runs curl command provided input: #!/usr/bin/env import method parameter environment method=${parameter_method} body body=${parameter_body} url url=${parameter_url} send request input -x &#34;${method}&#34; -d &#34;${body}&#34; &#34;${url}&#34; example of section go-vela/vela-tutorials repository. image once have executable needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup when executed: fromalpinerun apk add --update --no-cache ca-certificates curlcopy vela-sample.sh /bin/vela-sample.shentrypoint [&#34;bash&#34;, &#34;/bin/vela-sample.sh&#34;] target/vela-sample docker publishing order pipeline, make sure build publish registry: -t target/vela-sample:bash push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired executed locally via line: --rm -e parameter_body=&#34;this sample vela written with bash&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:- name:sample pluginimage:target/vela-sample:bashpull:alwaysparameters:url:http://vela.localhost.commethod:postbody:|this "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/admin/build/",
    "display": "Api/Admin/Build",
    "title": "Build",
    "content": "endpoint get /api/v1/admin/builds permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/builds&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;running&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474204, &#34;created&#34;: &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;second commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;ed95dcc0687c&#34;, &#34;runtime&#34;: &#34;distribution&#34;: &#34;&#34; }, 1563474077, 1563474076, &#34;first &#34;82823eb770b0&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/build-summary/",
    "display": "Registry/Pipeline/Build summary",
    "title": "Build Summary",
    "content": "description plugin enables you to provide summary of build pipeline. source code: https://github.com/go-vela/vela-build-summary registry: https://hub.docker.com/r/target/vela-build-summary usage note: users should refrain from using latest as the tag for docker image. it recommended use semantically versioned instead. sample outputting current build: steps:- name:build-summaryimage:target/vela-build-summary:latestpull:alwayssecrets:[build_summary_token ]sample an existing steps: name: build-summary image: target/vela-build-summary:latest pull: always secrets: build_summary_token parameters: number: different repo: org: octocat hello-world secrets configuring sensitive information your pipeline plain text. internal accepts following parameters authentication: parameter environment variable configuration token parameter_token, can vela substitute these values at runtime: token: supersecrettoken example will add secret step variable: build_summary_token=&lt;value&gt; external files volume /vela/parameters/build-summary/token, /vela/secrets/build-summary/token read stored /vela/secrets/ supports reading all via variables files. any set file take precedence over environment. are used configure name required default log_level log level true info parameter_log_level build_summary_log_level number by parameter_number build_summary_number vela_build_number org organization parameter_org build_summary_org vela_repo_org repo repository parameter_repo build_summary_repo vela_repo_name server communicate with parameter_server build_summary_server vela_addr communication parameter_token vela_netrc_password template coming soon! troubleshooting start tuning logs being displayed: log_level: trace below list common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/docker/",
    "display": "Docs/Usage/Docker",
    "title": "Building Docker Images",
    "content": "we assume you understand how to build run docker images. if need assistance on get started with docker; recommend see their documentation for getting set up. vela runs all workloads within containers. which essentially gives us two core different ways images: without elevated daemon access both options have disadvantages advantages, so encourage administrators weigh the pros/cons of they want images cluster. here are some resources can use while researching available tools: what buildkit it for? kaniko tools comparison makisu building an image most secure pattern not allowing any workers there plugin those vela-kaniko vela-makisu customers read tool comparisons before picking technology in-depth examples either utility respective pages. simple example provided below: version:&#34;1&#34;steps:- name:build publish kanikoimage:target/vela-kaniko:latestpull:alwaysparameters:registry:index.docker.iorepo:index.docker.io/octocat/hello-world- makisuimage:target/vela-makisu:latestpull:alwaysparameters:registry:index.docker.iotag:index.docker.io/octocat/hello-worldpushes:[index.docker.io ]with allowed as long required allow list worker. it&rsquo;s important work your administrator stand instances was deployed support. supported vela-docker docker&#39;s buildkitimage:target/vela-docker:latestpull:alwaysparameters:registry:index.docker.iotags:[index.docker.io/octocat/hello-world ]- buildkitimage:target/vela-docker:latestenvironment:docker_buildkit=0 pull:alwaysparameters:registry:index.docker.iotags:[index.docker.io/octocat/hello-world ]additional container securely kubernetes why rootless hard? introducing "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/build/cancel/",
    "display": "Api/Build/Cancel",
    "title": "Cancel",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build/cancel permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper 404 that server was unable to cancel build 500 there an error trying sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/cancel&#34; response &#34;canceled github/octocat/36&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/build/cancel/",
    "display": "Cli/Build/Cancel",
    "title": "Cancel",
    "content": "command vela cancel build &lt;parameters...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, build_org repo repository vela_repo, build_repo number vela_build, build_number output format vela_output, build_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response canceled github/octocat/1 "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/captains_log/",
    "display": "Registry/Pipeline/Captains log",
    "title": "Captain's Log",
    "content": "overview the captain&rsquo;s log plugin enables ability to manage release logs through slack vela pipeline. source code: https://github.com/target/captains-log registry: https://hub.docker.com/r/target/captains-log usage basic steps:- name:captains-logimage:target/captains-log:1pull:alwayssecrets:[github_token, slack_url]parameters:github_owner:targetgithub_repo:captains-loggithub_tag_id:&#34;v([0-9]+-release)$&#34;enterprise_host:https://git.myteam.comjira_team_domain:myteamnamespaceutilize teams organization: slack_url]parameters:github_owner:targetgithub_repo:captains-loggithub_tag_id:&#34;v([0-9]+-release)$&#34;enterprise_host:https://git.myteam.comjira_team_domain:myteamnamespaceteams:- name:team1color:&#34;#ffdc18&#34;emoji:&#34;✨&#34;mentions:&#34;&lt;@person1&gt; &lt;@person2&gt;&#34;issuetracking:jira:projects:- team1- team1subgroup- name:team2color:&#34;#f48642&#34;emoji:&#34;🔥&#34;mentions:&#34;&lt;@person3&gt;&#34;issuetracking:jira:projects:- team2secrets users should refrain from configuring sensitive information their pipeline plain text. accepts following parameters for authentication: parameter environment variable configuration github_token slack_token slack_url can use secrets substitute these values at runtime: steps: name: captains-log image: target/captains-log:1 pull: always secrets: github_token, parameters: github_owner: target github_repo: github_tag_id: &#34;v([0-9]+-release)$&#34; enterprise_host: https://git.myteam.com jira_team_domain: myteamnamespace github_token: supersecrettoken slack_url: https://hooks.slack.com/services/super/secret/url example will add step as variables: github_token= slack_url= more on options, visit documentation. https://target.github.io/captains-log/#/configuration/ "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/repo/chown/",
    "display": "Api/Repo/Chown",
    "title": "Chown",
    "content": "endpoint patch /api/v1/repos/:org/:repo/chown parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/chown&#34; response github/octocat changed owner "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/repo/chown/",
    "display": "Cli/Repo/Chown",
    "title": "Chown",
    "content": "command vela chown repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; changed owner "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/pipeline/compile/",
    "display": "Api/Pipeline/Compile",
    "title": "Compile",
    "content": "endpoint post /api/v1/pipelines/:org/:repo/compile parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider output format compiled pipeline configuration permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve compile templates 401 user does not have proper 404 500 system error while retrieving compiling sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x get -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat/expand&#34; response notice, when step fields such as image commands will be arranged alphabetical order. version:&#34;1&#34;secrets:- name:go_modulekey:github/octocat/template_secretengine:nativetype:reposteps:- commands:- go vet ./... &amp;&amp; git diff --exit-code; code=$?; checkout -- .; (exit $code)- fmt $code)image:golang:latestname:go_validatepull:not_present- test ./...image:golang:latestname:go_testpull:not_present- build -a -ldflags &#39;-extldflags &#34;-static&#34;&#39; -o release/heyvela {$go_module}image:golang:latestname:go_buildpull:not_presentenvironment:cgo_enabled:&#34;0&#34;goos:linuxtemplates:- name:gosource:github.com/github/octocat/go/template.ymltype:github{ &#34;version&#34;: &#34;1&#34;, &#34;metadata&#34;: {}, &#34;worker&#34;: &#34;secrets&#34;: &#34;name&#34;: &#34;go_module&#34;, &#34;key&#34;: &#34;github/octocat/template_secret&#34;, &#34;engine&#34;: &#34;native&#34;, &#34;type&#34;: &#34;repo&#34;, &#34;origin&#34;: &#34;ruleset&#34;: &#34;if&#34;: &#34;unless&#34;: {} ], &#34;steps&#34;: }, &#34;commands&#34;: &#34;go $code)&#34;, $code)&#34; &#34;template&#34;: &#34;image&#34;: &#34;golang:latest&#34;, &#34;go_validate&#34;, &#34;pull&#34;: &#34;not_present&#34; ./...&#34; &#34;go_test&#34;, &#34;-static &#34;&#39; {$go_module}&#34; &#34;go_build&#34;, &#34;not_present&#34;, &#34;environment&#34;: &#34;cgo_enabled&#34;: &#34;0&#34;, &#34;goos&#34;: &#34;linux&#34; &#34;go-tag_validate&#34;, &#34;go-tag_test&#34;, &#34;go-tag_build&#34;, &#34;templates&#34;: &#34;go&#34;, &#34;source&#34;: &#34;github.com/github/octocat/go/template.yml&#34;, &#34;github&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/administration/server/reference/compiler/",
    "display": "Server/Reference/Compiler",
    "title": "Compiler",
    "content": "note: the compiler embedded directly server can only be accessed through server. component responsible for transforming pipeline into an executable representation worker. during transformation, it will retrieve templates from one more registries depending on configuration. by default, vela use github as registry fetching templates, but you configure additional well. however, to fetch private organization repository github, need provide token compiler. additionally, send pipelines external endpoint, modified, based off custom modification endpoint used perform any number of customizations all workloads created system. some examples what do include, are not limited to: injecting updating configuration secrets services stages steps following options component: name description required default environment variables github-driver enables using enterprise false compiler_github vela_compiler_github github-url fully qualified url n/a compiler_github_url vela_compiler_github_url github-token authentication when compiler_github_token vela_compiler_github_token modification-addr modifying modification_addr vela_modification_addr modification-retries times resend failed requests modification_retries vela_modification_retries modification-secret authenticates communication between modification_secret vela_modification_secret modification-timeout timeout sent 8s modification_timeout vela_modification_timeout information these options, please see reference. drivers available documentation uses githug template https://docs.github.com/en/enterprise-server/admin/overview/system-overview official website: where world builds software. millions developers companies build, ship, maintain their software github—the largest most advanced development platform world. below displays example starting that registry: docker run --detach=true --env=vela_addr=https://vela-server.example.com --env=vela_compiler_github=true --env=vela_compiler_token=&lt;github-personal-access-token&gt; --env=vela_compiler_url=https://github.com --env=vela_database_encryption_key=&lt;encryption-key&gt; --env=vela_queue_driver=redis --env=vela_queue_addr=redis://&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;database&gt; --env=vela_port=443 --env=vela_secret=&lt;shared-secret&gt; --env=vela_scm_client=&lt;oauth-client-id&gt; --env=vela_scm_secret=&lt;oauth-client-secret&gt; --env=vela_webui_addr=https://vela.example.com --name=server --publish=80:80 --publish=443:443 --restart=always target/vela-server:latest enabled necessary order operate. enable github. your organization&rsquo;s copy contained within virtual appliance, hosted premises cloud, control. --env=vela_compiler_url=https://git.example.com "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/go/conditional/",
    "display": "Tutorials/Go/Conditional",
    "title": "Conditionals",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template conditional: {{if pipeline}} t1 {{end}} value of pipeline empty, output generated; otherwise, executed. empty values are false, 0, any nil pointer interface value, array, slice, map, string length zero. dot unaffected. information if/else statements see conditional docs sample let&rsquo;s take look at using with variable template: metadata:template:true{{$br := vela &#34;build_branch&#34;}}steps:- name:testcommands:- test ./...image:{{.image }}{{.pull_policy }}ruleset:event:[push, pull_request ]# branch equals master add step final pipeline{{if (eq $br &#34;master&#34;) }}- name:buildcommands:- buildimage:{{.image ]{{end }}the caller could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:- name:golangtemplate:name:samplevars:image:golang:latestpull_policy:&#34;pull: always&#34;which means compiled execution worker is: version:&#34;1&#34;steps:- name:sample_testcommands:- ./...image:golang:latestpull:alwaysruleset:event:[push, ]- name:sample_buildcommands:- buildimage:golang:latestpull:alwaysruleset:event:[push, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/starlark/conditional/",
    "display": "Tutorials/Starlark/Conditional",
    "title": "Conditionals",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview from conditional expressions: &#34;yes&#34; if enabled else &#34;no&#34; for information on if/else statements see docs sample let&rsquo;s take look at using with variable template: def main(ctx): steps &#34;name&#34;: &#34;test&#34;, &#34;image&#34;: ctx[&#34;vars&#34;][&#34;image&#34;], &#34;commands&#34;: &#34;go test ./...&#34; ], &#34;pull&#34;: ctx[&#34;vars&#34;][&#34;pull_policy&#34;], &#34;ruleset&#34;: &#34;event&#34;: &#34;push&#34;, &#34;pull_request&#34; branch equals master add step the final pipeline ctx[&#34;vela&#34;][&#34;build&#34;][&#34;branch&#34;] == &#34;master&#34;: steps.append( &#34;build&#34;, build&#34; return &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: steps, caller of template could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.startype:githubformat:starlarksteps:- name:sampletemplate:name:golangvars:image:golang:latestpull_policy:&#34;always&#34;which means compiled execution worker is: version:&#34;1&#34;steps:- name:sample_testcommands:- go ./...image:golang:latestpull:alwaysruleset:event:[push, pull_request ]- name:sample_buildcommands:- buildimage:golang:latestpull:alwaysruleset:event:[push, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/administration/server/reference/database/",
    "display": "Server/Reference/Database",
    "title": "Database",
    "content": "component responsible for integrating with database system based off the configuration provided. used by vela storing application data at rest. an organized collection of information necessary platform to operate. note: any sensitive stored will be encrypted using advanced encryption standard (aes). following options are configure component: name description required default environment variables database.addr full connection string true sqlite3 database_addr vela_database_addr database.driver type client control operate vela.sqlite database_driver vela_database_driver database.compression.level level compression logs database_compression_level vela_database_compression_level database.connection.idle maximum number idle connections database_connection_idle vela_database_connection_idle database.connection.life duration time reusable 30m database_connection_life vela_database_connection_life database.connection.open open database_connection_open vela_database_connection_open database.encryption.key aes-256 key encrypting/decrypting values n/a database_encryption_key vela_database_encryption_key database.skip_creation skips creation tables indexes false database_skip_creation vela_database_skip_creation more on these options, please see server reference. drivers available documentation postgres uses postgresql rest https://www.postgresql.org/ sqlite https://www.sqlite.org/ from official website: powerful, source object-relational over 30 years active development that has earned it strong reputation reliability, feature robustness, performance. below displays example starting connect database: docker run --detach=true --env=vela_addr=https://vela-server.example.com --env=vela_database_driver=postgres --env=vela_database_addr=postgres://&lt;username&gt;:&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;database&gt; --env=vela_database_encryption_key=&lt;encryption-key&gt; --env=vela_queue_driver=redis --env=vela_queue_addr=redis://&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;database&gt; --env=vela_port=443 --env=vela_secret=&lt;shared-secret&gt; --env=vela_scm_client=&lt;oauth-client-id&gt; --env=vela_scm_secret=&lt;oauth-client-secret&gt; --env=vela_webui_addr=https://vela.example.com --name=server --publish=80:80 --publish=443:443 --restart=always target/vela-server:latest c-language library implements small, fast, self-contained, high-reliability, full-featured, sql engine. most engine world. built into all mobile phones computers comes bundled inside countless other applications people use every day. --env=vela_database_driver=sqlite3 --env=vela_database_addr=vela.sqlite enabled not provide order "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/docker/",
    "display": "Registry/Pipeline/Docker",
    "title": "Docker",
    "content": "description plugin enables you to build publish docker images vela pipeline. source code: https://github.com/go-vela/vela-docker registry: https://hub.docker.com/r/target/vela-docker usage note: users should refrain from using latest as the tag for image. it recommended use semantically versioned instead. samples of building publishing an image: steps:- name:publish_hello-worldimage:target/vela-docker:latestpull:alwaysparameters:registry:index.docker.iorepo:octocat/hello-worldtags:[latest ]steps:- name:publish_hello-worldimage:target/vela-docker:latestpull:alwaysparameters:registry:index.docker.iotags:[index.docker.io/octocat/hello-world:latest two above are functionally equivalent. sample image without publishing: steps: name: hello world target/vela-docker:latest pull: always parameters: dry_run: true index.docker.io repo: octocat/hello-world tags: with custom octocat/hello-world:1 index.docker.io/octocat/hello-world:foobar arguments: build_args: foo=bar caching: publish_hello-world cache_from: index.docker.io/octocat/hello-world daemon settings: daemon: registry_mirrors: mirror.index.docker.io secrets configuring sensitive information your pipeline plain text. internal can substitute these values at runtime: secrets: docker_username, docker_password username: octocat password: supersecretpassword example will add step environment variables: docker_username=&lt;value&gt; docker_password=&lt;value&gt; external accepts following files authentication: parameter volume configuration password /vela/parameters/docker/password, /vela/secrets/docker/password username /vela/parameters/docker/username, /vela/secrets/docker/username read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. by default kit on; be turned off setting docker_buildkit=0 key.key syntax signifies new yaml object within definition. used configure name required add_hosts host-to-ip mapping format (host:ip) false n/a parameter_add_hosts docker_add_hosts build_args pass build-time parameter_build_args docker_build_args cache_from consider cache sources parameter_cache_from docker_cache_from cgroup_parent parent cgroup container parameter_cgroup_parent docker_cgroup_parent compress enable compressing context gzip parameter_compress docker_compress and/or directory parameter_context docker_context cpu parameter, see settings below parameter_cpu docker_cpu parameter_daemon docker_daemon disable_content_trust skipping verification parameter_disable_content_trust docker_disable_content_trust dry_run parameter_dry_run docker_dry_run dockerfile parameter_file docker_file force_rm removing intermediate containers after successful parameter_force_rm docker_force_rm image_id_file write id parameter_image_id_file docker_image_id_file isolation technology parameter_isolation docker_isolation labels metadata parameter_labels docker_labels log_level log level info parameter_log_level docker_log_level memory limit parameter_memory docker_memory memory_swaps swap equal plus swap: &lsquo;-1&rsquo; unlimited parameter_memory_swaps docker_memory_swaps network networking mode run instructions during parameter_network docker_network no_cache disable caching when parameter_no_cache docker_no_cache output destination (type=local,dest=path) parameter_outputs docker_outputs communication registry parameter_password platform if server multi-platform capable parameter_platform docker_platform progress type options (auto|plain|tty) parameter_progress docker_progress pull attempting newer version parameter_pull docker_pull quiet suppressing print on success parameter_quiet docker_quiet address communicate parameter_registry docker_registry remove parameter_remove docker_remove repo repository parameter_repo docker_repo expose (only buildkit enabled) (id=mysecret,src=/local/secret) parameter_secrets docker_secrets security_opts security parameter_security_opts docker_security_opts shm_sizes size /dev/shm parameter_shm_sizes docker_shm_sizes squash squashing newly built layers into single layer parameter_squash docker_squash ssh_components ssh agent socket keys (default|[=|[,]]) parameter_ssh_components docker_ssh_components stream attaching negotiate parameter_stream docker_stream tags (name:tag) parameter_tags docker_tags target stage parameter_target docker_target ulimits parameter_ulimits docker_ulimits user parameter_username docker_username parameter: period cfs (completely fair scheduler) quota shares (relative weight) set_cpus cpus which allow execution (0-3, 0,1) set_mems mems bip bridge ip dns settings, experimental features insecure_registries insecure registries ipv6 mtu contain registry_mirrors mirrors storage setting: servers nameservers searches search domains driver opts template coming soon! troubleshooting start tuning logs being displayed: log_level: trace list common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/downstream/",
    "display": "Registry/Pipeline/Downstream",
    "title": "Downstream",
    "content": "description plugin enables you to trigger builds for other repos vela pipeline. source code: https://github.com/go-vela/vela-downstream registry: https://hub.docker.com/r/target/vela-downstream usage note: users should refrain from using latest as the tag docker image. it recommended use semantically versioned instead. sample of triggering downstream build: steps:- name:trigger_hello-worldimage:target/vela-downstream:latestpull:alwaysparameters:repos:- octocat/hello-worldserver:https://vela-server.localhostsample build specific branch: steps: name: trigger_hello-world image: target/vela-downstream:latest pull: always parameters: main repos: octocat/hello-world server: https://vela-server.localhost event: status: can provide list statuses plugin. first found matching either will be triggered. success, failure multiple trigger_multiple go-vela/hello-world with different branches: symbol at end org/repo unique branch per repo. override value set parameter. octocat/hello-world@test go-vela/hello-world@stage secrets configuring sensitive information your pipeline plain text. internal substitute these values runtime: secrets: downstream_token token: supersecretvelatoken example add secret step environment variables: downstream_token=&lt;value&gt; external accepts following files authentication: parameter volume configuration token /vela/parameters/downstream/token, /vela/secrets/downstream/token read stored /vela/secrets/ parameters supports reading all via variables files. any file take precedence over environment. are used configure name required default on true master parameter_branch downstream_branch event push parameter_event downstream_event log_level log level info parameter_log_level downstream_log_level names n/a parameter_repos downstream_repos server communicate parameter_server downstream_server status success parameter_status downstream_status communication parameter_token template coming soon! troubleshooting start by tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/enable_repo/",
    "display": "Docs/Usage/Enable repo",
    "title": "Enable a Repo",
    "content": "note: you will need admin access to the repo be able activate it vela. because add webhooks repo. via ui for example, we&rsquo;ll go over using can always head cli docs on how cli. log into your vela instance. click repositories. select org from available list. next would like add. alternatively all repos an org. if doesn&rsquo;t exist, try clicking refresh list top right. now has necessary web hook tip: you&rsquo;re coming another ci platform set starting build number by updating counter field ui, cli, api. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/pipeline/exec/",
    "display": "Cli/Pipeline/Exec",
    "title": "Exec",
    "content": "command vela exec pipeline &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables branch build vela_branch, pipeline_branch comment vela_comment, pipeline_comment event vela_event, pipeline_event tag vela_tag, pipeline_tag target vela_target, pipeline_target output format json, spew yaml vela_output, pipeline_output file of vela_file, pipeline_file path vela_path, pipeline_path local enables mounting directory vela_local, pipeline_local volume provide list volumes mount vela_volumes, pipeline_volumes org organization vela_org, pipeline_org repo repository vela_repo, pipeline_repo secrets does not have access any secret stored other attached store. set by putting them before command, ie my_secret=foo pipeline. so if our using kaniko plugin, it may require kaniko_password, which we with kaniko_password=mypass sample section assumes already installed setup cli. install cli, please review installation documentation. authentication request response [step: init] &gt; inspecting runtime network... docker network inspect localorg_localrepo_1 &#34;name&#34;: &#34;localorg_localrepo_1&#34;, &#34;id&#34;: &#34;cf204e6081cd4c10e3a285e7545790152afca05991c2dc67534f496844c1d274&#34;, &#34;created&#34;: &#34;2021-06-01t19:37:35.4772628z&#34;, &#34;scope&#34;: &#34;local&#34;, &#34;driver&#34;: &#34;bridge&#34;, &#34;enableipv6&#34;: false, &#34;ipam&#34;: &#34;default&#34;, &#34;options&#34;: null, &#34;config&#34;: &#34;subnet&#34;: &#34;192.168.0.0/20&#34;, &#34;gateway&#34;: &#34;192.168.0.1&#34; }, &#34;internal&#34;: &#34;attachable&#34;: &#34;ingress&#34;: &#34;configfrom&#34;: &#34;network&#34;: &#34;&#34; &#34;configonly&#34;: &#34;containers&#34;: {}, &#34;labels&#34;: {} volume... &#34;createdat&#34;: &#34;2021-06-01t19:37:35z&#34;, &#34;mountpoint&#34;: &#34;/var/lib/docker/volumes/localorg_localrepo_1/_data&#34;, &#34;local&#34; pulling service images... stage step image alpine:latest sha256:6dbb9cc54074106d46d4ccb330f2a40a682d49dda5f4844962b7dce9fe44aaec hello vela] echo &#34;hello vela!&#34; vela! "
    },

    {
    "url": "https://jbrockopp.github.io/docs/administration/worker/reference/executor/",
    "display": "Worker/Reference/Executor",
    "title": "Executor",
    "content": "component responsible for coordinating with the runtime to manage workload resources. throughout lifecycle of these resources, will track report results back server. configuration following options are used configure component: name description required default environment variables executor.driver type client control operate executor true linux executor_driver vela_executor_driver executor.log_method method publish logs server byte-chunks executor_log_method vela_executor_log_method note: more information on options, please see worker reference. drivers available documentation uses running workloads https://www.linux.com/ local (cli only) n/a from official website: has been around since mid-1990s reached user-base that spans globe. just like windows, ios, mac os, an operating system. fact, one most popular platforms planet, android, powered by below displays example starting vela use executor: docker run --detach=true --env=vela_executor_driver=linux --env=vela_queue_driver=redis --env=vela_queue_addr=redis://&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;database&gt; --env=vela_server_addr=https://vela-server.example.com --env=vela_server_secret=&lt;shared-secret&gt; --env=vela_worker_addr=https://vela-worker.example.com --name=worker --publish=80:80 --publish=443:443 --restart=always --volume=/var/run/docker.sock:/var/run/docker.sock target/vela-worker:latest enabled not necessary provide order operate. driver only intended cli. it&rsquo;s recommended any configured driver. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/pipeline/expand/",
    "display": "Api/Pipeline/Expand",
    "title": "Expand",
    "content": "endpoint post /api/v1/pipelines/:org/:repo/expand parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider output format expanded pipeline configuration permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve expand templates 401 user does not have proper 404 500 system error while retrieving expanding sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x get -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat/expand&#34; response notice, when step fields such as image commands will be arranged alphabetical order. version:&#34;1&#34;secrets:- name:go_modulekey:github/octocat/template_secretengine:nativetype:reposteps:- commands:- go vet ./... &amp;&amp; git diff --exit-code; code=$?; checkout -- .; (exit $code)- fmt $code)image:golang:latestname:go_validatepull:not_present- test ./...image:golang:latestname:go_testpull:not_present- build -a -ldflags &#39;-extldflags &#34;-static&#34;&#39; -o release/heyvela {$go_module}image:golang:latestname:go_buildpull:not_presentenvironment:cgo_enabled:&#34;0&#34;goos:linuxtemplates:- name:gosource:github.com/github/octocat/go/template.ymltype:github{ &#34;version&#34;: &#34;1&#34;, &#34;metadata&#34;: {}, &#34;worker&#34;: &#34;secrets&#34;: &#34;name&#34;: &#34;go_module&#34;, &#34;key&#34;: &#34;github/octocat/template_secret&#34;, &#34;engine&#34;: &#34;native&#34;, &#34;type&#34;: &#34;repo&#34;, &#34;origin&#34;: &#34;ruleset&#34;: &#34;if&#34;: &#34;unless&#34;: {} ], &#34;steps&#34;: }, &#34;commands&#34;: &#34;go $code)&#34;, $code)&#34; &#34;template&#34;: &#34;image&#34;: &#34;golang:latest&#34;, &#34;go_validate&#34;, &#34;pull&#34;: &#34;not_present&#34; ./...&#34; &#34;go_test&#34;, &#34;-static &#34;&#39; {$go_module}&#34; &#34;go_build&#34;, &#34;not_present&#34;, &#34;environment&#34;: &#34;cgo_enabled&#34;: &#34;0&#34;, &#34;goos&#34;: &#34;linux&#34; &#34;templates&#34;: &#34;go&#34;, &#34;source&#34;: &#34;github.com/github/octocat/go/template.yml&#34;, &#34;github&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/starlark/functions/",
    "display": "Tutorials/Starlark/Functions",
    "title": "Functions",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview from functions: def twice(x): return str(twice) &quot;&lt;function f&gt;&quot; twice(2) twice(&quot;two&quot;) &quot;twotwo&quot; the function&rsquo;s name preceded by keyword followed parameter list (which enclosed parentheses), colon, then an indented block of statements which form body function. comma-separated whose elements are four kinds. first come zero more required parameters, simple identifiers; all calls must provide argument value for these parameters. parameters optional name=expression. expression specifies default use that do not it. optionally single *. called varargs parameter, it accumulates surplus positional arguments specified call. finally, there may be **. dictionary any name=value match prior parameter. sample let&rsquo;s take look at using function within template: main(ctx): &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: step(&#39;foo&#39;), step(&#39;bar&#39;) ], step(word): &#34;name&#34;: &#34;build_%s&#34; word, &#34;image&#34;: &#34;alpine:latest&#34;, &#39;commands&#39;: &#34;echo %s&#34; word caller template could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.starformat:starlarktype:githubsteps:- name:echotemplate:name:samplewhich means compiled pipeline execution on worker is: version:1steps:- name:sample_build_fooimage:alpine:latestcommands:- echo foo- name:sample_build_barimage:alpine:latestcommands:- bar "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/completion/generate/",
    "display": "Cli/Completion/Generate",
    "title": "Generate",
    "content": "command vela generate completion &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables bash auto-completion script vela_bash, completion_bash zsh vela_zsh, completion_zsh permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --bash response #! /bin/bash _cli_bash_autocomplete() if [[ &#34;${comp_words[0]}&#34; != &#34;source&#34; ]]; then local cur opts base compreply=() cur=&#34;${comp_words[comp_cword]}&#34; &#34;$cur&#34; == &#34;-&#34;* opts=$( ${comp_words[@]:0:$comp_cword} ${cur} --generate-bash-completion else fi compreply=( $(compgen -w &#34;${opts}&#34; -- ${cur}) return complete -o bashdefault default nospace -f _cli_bash_autocomplete permanent automatic covers how enable your terminal permanently. version of greater than 4. check with: --version older 4, use brew newer version. v2 bash-completion@2 copy &gt;&gt; /usr/local/etc/bash_completion.d/vela.sh update profile with export bash_completion_compat_dir=&#34;/usr/local/etc/bash_completion.d&#34; $home/.bash_profile -r &#34;/usr/local/etc/profile.d/bash_completion.sh&#34; ]] &amp;&amp; source current &lt;(vela --zsh) $home/.zshrc you&rsquo;re met an error like: complete:13: not found: compdef need add top $home/.zshrc: autoload -uz compinit "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/config/generate/",
    "display": "Cli/Config/Generate",
    "title": "Generate",
    "content": "command vela generate config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables api.addr full url api server vela_addr, config_addr api.token.access access token vela_access_token, config_access_token api.token.refresh refresh vela_refresh_token, config_refresh_token api.token pat vela_token, config_token api.version version of vela_api_version, config_api_version log.level set level logging vela_log_level, config_log_level output format results vela_output, config_output org organization calls vela_org, config_org repo repository vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --api.addr https://vela-server.localhost --log.level info response api: addr: log: level: secret: {} "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/pipeline/generate/",
    "display": "Cli/Pipeline/Generate",
    "title": "Generate",
    "content": "command vela generate pipeline &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables file of vela_file, pipeline_file path vela_path, pipeline_path stages generates with vela_stages, pipeline_stages type being generated vela_type, pipeline_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request response &#34;.vela.yml&#34; go "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/build/get/",
    "display": "Api/Build/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;running&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474204, &#34;created&#34;: &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;second commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;ed95dcc0687c&#34;, &#34;runtime&#34;: &#34;distribution&#34;: &#34;&#34; }, 1563474077, 1563474076, &#34;first &#34;82823eb770b0&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/deployment/get/",
    "display": "Api/Deployment/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/deployments/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/2&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;ref&#34;: &#34;master&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;target&#34;: &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; }, &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/hook/get/",
    "display": "Api/Hook/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/hooks/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; }, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/pipeline/get/",
    "display": "Api/Pipeline/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/pipelines/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider output format pipeline configuration permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve 401 user does not have proper 404 500 system error while retrieving sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat&#34; response version:&#34;1&#34;steps:- name:helloimage:golangruleset:event:pushcommands:- echo &#34;hello&#34;{ &#34;version&#34;: &#34;1&#34;, &#34;metadata&#34;: {}, &#34;worker&#34;: &#34;steps&#34;: &#34;ruleset&#34;: &#34;if&#34;: &#34;event&#34;: &#34;push&#34; }, &#34;unless&#34;: &#34;matcher&#34;: &#34;filepath&#34;, &#34;operator&#34;: &#34;and&#34; &#34;commands&#34;: &#34;echo &#34;hello &#34;&#34; ], &#34;template&#34;: &#34;image&#34;: &#34;golang&#34;, &#34;name&#34;: &#34;hello&#34;, &#34;pull&#34;: &#34;not_present&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/repo/get/",
    "display": "Api/Repo/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;counter&#34;: 0, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/secret/get/",
    "display": "Api/Secret/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/secrets/:engine/:type/:org/:name parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: null, &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] }, 2, &#34;bar&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/service/get/",
    "display": "Api/Service/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 }, &#34;clone&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/step/get/",
    "display": "Api/Step/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; }, &#34;clone&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/user/get/",
    "display": "Api/User/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; response &#34;id&#34;: 2, &#34;name&#34;: &#34;octocat&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false }, 1, &#34;octokitty&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/build/get/",
    "display": "Cli/Build/Get",
    "title": "Get",
    "content": "command vela get build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization builds vela_org, build_org repo repository vela_repo, build_repo output format vela_output, build_output page prints specific vela_page, build_page per.page number print per vela_per_page, build_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response status event branch duration failure push master 45s 50s success 54s 55s pending ... "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/deployment/get/",
    "display": "Cli/Deployment/Get",
    "title": "Get",
    "content": "command vela get deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization deployments vela_org, deployment_org repo repository vela_repo, deployment_repo output format vela_output, deployment_output page prints specific vela_page, deployment_page per.page number print per vela_per_page, deployment_per_page also supports setting via configuration file: please review cli config documentation. sample section assumes have already installed setup cli. install cli, installation authentication request with view &#34;github&#34; &#34;octocat&#34; --org github --repo octocat response generated from successful id task user ref target deploy:vela master production examples examples: 1. repository. myorg myrepo 2. wide output. --output 3. yaml 4. json 5. when set. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/hook/get/",
    "display": "Cli/Hook/Get",
    "title": "Get",
    "content": "command vela get hook &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization hooks vela_org, hook_org repo repository vela_repo, hook_repo output format vela_output, hook_output page prints specific vela_page, hook_page per.page number print per vela_per_page, hook_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response status event branch failure push master success "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/log/get/",
    "display": "Cli/Log/Get",
    "title": "Get",
    "content": "command vela get log &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, log_org repo repository vela_repo, log_repo build number vela_build, log_build output format logs vela_output, log_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response git init initialized empty /vela/src/github.com/github/octocat/.git/ remote add origin https://github.com/github/octocat.git --verbose (fetch) (push) fetch --no-tags refs/heads/master from https://github.com/github/octocat branch master -&gt; fetch_head [new branch] origin/master reset --hard afafce5e33a8efd4340613b31a953107d6dec3a3 head now at afafce5 dummy commit echo &#34;hello world!&#34; hello world! "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/repo/get/",
    "display": "Cli/Repo/Get",
    "title": "Get",
    "content": "command vela get repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output page prints specific repositories vela_page, repo_page per.page number print per vela_per_page, repo_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request response org/repo status events visibility branch github/octocat true push,pull_request public master "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/secret/get/",
    "display": "Cli/Secret/Get",
    "title": "Get",
    "content": "command vela get secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization secrets vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat response events foo github/octocat push,pull_request "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/service/get/",
    "display": "Cli/Service/Get",
    "title": "Get",
    "content": "command vela get service &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization services vela_org, service_org repo repository vela_repo, service_repo build number vela_build, service_build output format vela_output, service_output page prints specific vela_page, service_page per.page print per vela_per_page, service_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response status runtime duration publish failure 1s success 17s test 10s clone 2s "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/step/get/",
    "display": "Cli/Step/Get",
    "title": "Get",
    "content": "command vela get step &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization steps vela_org, step_org repo repository vela_repo, step_repo build number vela_build, step_build output format vela_output, step_output page prints specific vela_page, step_page per.page print per vela_per_page, step_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response status runtime duration publish failure 1s success 17s test 10s clone 2s "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/git/",
    "display": "Registry/Pipeline/Git",
    "title": "Git",
    "content": "description note: plugin automatically injected into your pipeline for the source repository. enables you to clone repositories vela build workspace. code: https://github.com/go-vela/vela-git registry: https://hub.docker.com/r/target/vela-git usage users should refrain from using latest as tag docker image. it recommended use semantically versioned instead. sample of cloning repository: steps:- name:clone_hello-worldimage:target/vela-git:latestpull:alwaysparameters:path:hello-worldref:refs/heads/masterremote:https://github.com/octocat/hello-world.gitsha:7fd1a60b01f91b314f59955a4e4d4e80d8edf11dsample repository with submodules: steps: name: clone_hello-world image: target/vela-git:latest pull: always parameters: path: hello-world ref: refs/heads/master remote: https://github.com/octocat/hello-world.git sha: 7fd1a60b01f91b314f59955a4e4d4e80d8edf11d true tags: secrets configuring sensitive information plain text. internal can substitute these values at runtime: secrets: git_username, git_password username: octocat password: supersecretpassword /home/octocat_hello-world_1 example will add step environment variables: git_username=&lt;value&gt; git_password=&lt;value&gt; external accepts following files authentication: parameter volume configuration password /vela/parameters/git/password, /vela/secrets/git/password username /vela/parameters/git/username, /vela/secrets/git/username read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. are used configure name required default log_level log level info parameter_log_level git_log_level machine communicate github.com parameter_machine git_machine vela_netrc_machine authentication by parameter_password vela_netrc_password user parameter_username git_username vela_netrc_username path local parameter_path git_path vela_build_workspace ref reference generated commit parameter_ref git_ref vela_build_ref remote full url parameter_remote git_remote vela_repo_clone sha sha-1 hash parameter_sha git_sha vela_build_commit submodules fetching false parameter_submodules git_submodules tags parameter_tags git_tags depth specific not parameter_depth git_depth template coming soon! troubleshooting start tuning logs being displayed: log_level: trace below list common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/tutorials/go/",
    "display": "Plugins/Tutorials/Go",
    "title": "Go",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from go documentation: an open source programming language makes it easy build simple, reliable, efficient software. code plugin using go, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program http request the provided input: package main import &#34;fmt&#34; &#34;net/http&#34; &#34;os&#34; &#34;strings&#34; func main() // method parameter environment := os.getenv(&#34;parameter_method&#34;) body os.getenv(&#34;parameter_body&#34;) url os.getenv(&#34;parameter_url&#34;) payload strings.newreader(body) new input request, err http.newrequest(method, url, payload) if != nil fmt.println(err) os.exit(1) send capture response response, http.defaultclient.do(request) output fmt.println(response) example of section go-vela/vela-tutorials repository. executable now have accomplish our plugin&rsquo;s task, compile produce binary target platform: goos=linux goarch=amd64 cgo_enabled=0 -o vela-sample please ensure compiled right platform. it&rsquo;s not, may fail properly run unclear error messages. image once needed dockerfile should contain setup when executed: fromgolang:alpinerun apk add --update --no-cache ca-certificatescopy /bin/vela-sampleentrypoint [&#34;/bin/vela-sample&#34;] target/vela-sample docker publishing order pipeline, make sure publish registry: -t target/vela-sample:go push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with go&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:- name:sample pluginimage:target/vela-sample:gopull:alwaysparameters:url:http://vela.localhost.commethod:postbody:|this "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/sdk/go/",
    "display": "Reference/Sdk/Go",
    "title": "Go",
    "content": "overview vela go sdk client to perform operations on objects view content new way integrate into applications. for complete list of apis examples, please take look at the godoc reference documentation. minimum requirements 1.13 above get build info example below sample program demonstrating how authenticate with sdk: package main import &#34;fmt&#34; &#34;github.com/go-vela/sdk-go/vela&#34; func main() // full uri server url := &#34;https://your-vela-server.example.com&#34; token &#34;sometoken&#34; accesstoken &#34;someaccesstoken&#34; refreshtoken &#34;somerefreshtoken&#34; instantiate client, err vela.newclient(url, nil) if != nil fmt.println(err) set authentication mechanisms client.authentication.settokenauth(token) client.authentication.setaccessandrefreshauth(accesstoken, refreshtoken) from build, resp, c.build.get(&#34;go-vela&#34;, &#34;sdk-go&#34;, 1) fmt.printf(&#34;received response code %d, %+v&#34;, resp.statuscode, build) "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/admin/hook/",
    "display": "Api/Admin/Hook",
    "title": "Hook",
    "content": "endpoint get /api/v1/admin/hooks permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/hooks&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: 1, &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; }, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/hugo/",
    "display": "Registry/Pipeline/Hugo",
    "title": "Hugo",
    "content": "description plugin enables you generate static website using hugo pipeline. source code: https://github.com/go-vela/vela-hugo registry: https://hub.docker.com/r/target/vela-hugo usage note: users should refrain from latest as the tag for docker image. it recommended to use semantically versioned instead. sample of building site: steps:- name:hugoimage:target/vela-hugo:latestpull:alwaysparameters:theme_name:hugo-theme-learnsample site docsy theme: steps: name: image: target/vela-hugo:latest pull: always parameters: theme_name: hugo-theme-learn custom version hugo: version: 0.79.0 extended binary: some themes may require binary additional functionality. extended: true an environment build differently depending on configuration: please see documentation how configure properly. environment: dev multiple via configuration file: name:hugoimage:target/vela-hugo:latestpull:alwaysparameters:config_file:config.tomlparameters supports reading all parameters variables files. any values set file take precedence over environment. following are used name required default base_url hostname (and path) root, e.g. http://spf13.com/ false n/a parameter_base_url hugo_base_url cache_directory filesystem path cache directory parameter_cache_directory hugo_cache_directory content_directory content parameter_content_directory hugo_content_directory config_directory config parameter_config_directory hugo_config_directory config_file (supports: json,toml,yaml) parameter_config_file hugo_config_file draft include marked parameter_draft hugo_draft target environment, located parameter_environment hugo_environment expired parameter_expired hugo_expired whether parameter_extended hugo_extended future with publish date parameter_future hugo_future layout_directory layout parameter_layout_directory hugo_layout_directory log_level log level info parameter_log_level hugo_log_level output_directory write files parameter_output_directory hugo_output_directory source_directory read relative parameter_source_directory hugo_source_directory theme_name theme parameter_theme_name hugo_theme_name theme_directory parameter_theme_directory hugo_theme_directory 0.76.5 parameter_version hugo_version template coming soon! troubleshooting can start by tuning logs being displayed: log_level: trace below list common problems solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/influx/",
    "display": "Registry/Pipeline/Influx",
    "title": "Influx",
    "content": "description plugin enables you to send data an influxdb pipeline. source code: https://github.com/go-vela/vela-influx registry: https://hub.docker.com/r/target/vela-influx usage note: users should refrain from using latest as the tag for docker image. it recommended use semantically versioned instead. sample of emitting pass/fail build metric: steps:- name:writeimage:target/vela-influx:latestpull:alwaysparameters:addr:https://influx.example.comdatabase:velaname:build_reportfields:build_status:${vela_build_status}sample metric with custom tags: steps: name: write image: target/vela-influx:latest pull: always parameters: addr: https://influx.example.com database: vela build_report fields: build_status: ${build_status} repo_name: ${vela_repo_full_name} build_number: &#34;${vela_build_number}&#34; secrets configuring sensitive information your pipeline plain text. internal accepts following parameters authentication: parameter environment variable configuration password parameter_password, influx_password username parameter_username, influx_username can substitute these values at runtime: secrets: influx_username, username: supersecretusername password: supersecretpassword ${vela_build_status} example will add secret trigger_hello-world step variables: downstream_token=&lt;value&gt; external files volume /vela/parameters/influx/password, /vela/secrets/influx/password /vela/parameters/influx/username, /vela/secrets/influx/username read value stored /vela/secrets/ supports reading all via variables files. any set file take precedence over environment. are used configure name required default addr influx instance communicate true n/a parameter_addr influx_addr database on parameter_database influx_database fields along parameter_fields influx_fields log_level log level info parameter_log_level influx_log_level sent build_metrics parameter_name influx_name communication false parameter_password tags extra metadata parameter_tags influx_tags user parameter_username template coming soon! troubleshooting start by tuning logs being displayed: log_level: trace below list common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/schema/",
    "display": "Docs/Usage/Schema",
    "title": "JSON Schema support",
    "content": "the schema gets published updated via https://github.com/go-vela/types where it ends up as release artifact. latest available for download from https://github.com/go-vela/types/releases/latest/download/schema.json. addition, has been added to json store project at https://www.schemastore.org/ which provides direct support various editors (see supporting section https://www.schemastore.org/json/). "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/kaniko/",
    "display": "Registry/Pipeline/Kaniko",
    "title": "Kaniko",
    "content": "description plugin enables you to build publish docker images vela pipeline. source code: https://github.com/go-vela/vela-kaniko registry: https://hub.docker.com/r/target/vela-kaniko usage note: users should refrain from using latest as the tag for image. it recommended use semantically versioned instead. sample of building publishing an image: steps:- name:publish_hello-worldimage:target/vela-kaniko:latestpull:alwaysparameters:registry:index.docker.iorepo:index.docker.io/octocat/hello-worldsample image without publishing: steps: name: publish_hello-world target/vela-kaniko:latest pull: always parameters: dry_run: true index.docker.io repo: index.docker.io/octocat/hello-world attempting three times: push_retry: with custom tags: foobar automatic auto_tag: depending on type event, will be tagged follows: event (using v1.0.0 example): index.docker.io/octocat/hello-world:latest index.docker.io/octocat/hello-world:v1.0.0 all other events: index.docker.io/octocat/hello-world:eeea105fed7fc11bda4b43a00edfc49a5c982968 arguments: build_args: foo=bar caching: cache: cache_repo: snapshot mode snapshot_mode: redo secrets configuring sensitive information your pipeline plain text. internal can substitute these values at runtime: secrets: kaniko_username, kaniko_password username: octocat password: supersecretpassword example add step environment variables: kaniko_username=&lt;value&gt; kaniko_password=&lt;value&gt; external accepts following files authentication: parameter volume configuration password /vela/parameters/kaniko/password, /vela/secrets/kaniko/password username /vela/parameters/kaniko/username, /vela/secrets/kaniko/username read secret stored /vela/secrets/ parameters supports reading via variables files. any set file take precedence over environment. help improve performance but recommend follow kaniko&rsquo;s guidelines picking mode. are used configure name required default auto_tag tagging (tag sha, latest) false parameter_auto_tag kaniko_auto_tag build_args passed build-time n/a parameter_build_args kaniko_build_args cache enable caching layers parameter_cache kaniko_cache cache_repo specific repo parameter_cache_repo kaniko_cache_repo context path parameter_context kaniko_context dockerfile parameter_dockerfile kaniko_dockerfile dry_run parameter_dry_run kaniko_dry_run generated by parameter_event kaniko_event vela_build_event labels unique parameter_labels kaniko_labels log_level log level info parameter_log_level kaniko_log_level mirror registry parameter_mirror kaniko_mirror communication parameter_password docker_password push_retry number retries pushing remote destination parameter_push_retry kaniko_push_retry repository parameter_registry kaniko_registry parameter_repo kaniko_repo sha sha-1 hash commit parameter_sha kaniko_sha vela_build_commit snapshot_mode control how filesystem. options (full time) parameter_tag kaniko_tag vela_build_tag tags parameter_tags kaniko_tags target stage parameter_target kaniko_target user parameter_username kaniko_username docker_username template coming soon! troubleshooting start tuning logs being displayed: log_level: trace below list common problems solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/tutorials/kotlin/",
    "display": "Plugins/Tutorials/Kotlin",
    "title": "Kotlin",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from kotlin documentation: is&hellip; modern, concise safe programming language easy pick up, so you can powerful applications immediately code plugin using kotlin, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes an http request the provided input: import org.http4k.client.apacheclient org.http4k.core.* org.http4k.format.jackson.auto yellowstone.cr.vcrexception fun main() // get vela parameters env variables val method when (&quot;method&quot;.parameter.envordefault(&quot;get&quot;).trim().lowercase()) &quot;get&quot; -&gt; method.get &quot;put&quot; method.put &quot;post&quot; method.post &quot;delete&quot; method.delete else throw exception(&quot;method not supported&quot;) body &quot;body&quot;.parameter.env url &quot;url&quot;.parameter.env set up clientid client: httphandler apacheclient() make print result println(request(method, url).addbody(body).okordie(client).toobject&lt;string&gt;()) helper functions string.env get() system.getenv(this) ?: vcrexception(&quot;the environment variable $this required but missing!&quot;) string.envordefault(default: string) default string.parameter &quot;parameter_$this&quot; request.okordie(client: httphandler) client(this).let response response.takeif it.status.successful exception(&quot;got unexpected ${response.status.code} ${method.name} $uri! ${response.bodystring()}&quot;) inline &lt;reified any&gt; response.toobject() body.auto&lt;t&gt;().tolens()(this) request.addbody(t: t) body.auto&lt;t&gt;().tolens()(t, this) jar order runnable executable, must turn it into file. below example build.gradle.kts org.jetbrains.kotlin.gradle.tasks.kotlincompile application kotlin(&quot;jvm&quot;) version &quot;1.5.10&quot; repositories mavencentral() group &quot;mygroup&quot; mainclass.set(&quot;mygroup.mainkt&quot;) dependencies deps(format: string, vararg arr: with(format) arr.foreach implementation(format(it)) implementation(kotlin(&quot;stdlib-jdk8&quot;)) implementation(kotlin(&quot;reflect&quot;)) deps(&quot;org.http4k:http4k-%s:4.9.9.0&quot;, &quot;client-apache&quot;, &quot;format-jackson&quot;) tasks enabled true withtype&lt;kotlincompile&gt; kotlinoptions.jvmtarget javaversion.version_11.majorversion withtype&lt;test&gt; usejunitplatform() build jar, run ./gradlew clean disttar image once have needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup executed fromalpine:latest# install java 11env java_home /usr/lib/jvm/java-11-openjdkenv path $path:/usr/lib/jvm/java-11-openjdk/jre/bin:/usr/lib/jvm/java-11-openjdkrun apk update &amp;&amp; upgrade --no-cache add openjdk11 --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community# copy executableadd build/distributions/vela-sample.tar /cmd [&#34;/vela-sample/bin/vela-sample&#34;]publishing pipeline, sure publish docker registry: -t target/vela-sample:kotlin push has added benefit of enabling others community consume your plugin! troubleshooting verify performs desired locally via command line: --rm -e parameter_body=&#34;this sample written with kotlin&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after publishing registry, referenced pipeline: version:&#34;1&#34;steps:- name:sample pluginimage:target/vela-sample:kotlinpull:alwaysparameters:url:http://vela.localhost.commethod:postbody:|this "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/kubernetes/",
    "display": "Registry/Pipeline/Kubernetes",
    "title": "Kubernetes",
    "content": "description plugin enables the ability to manage resources kubernetes vela pipeline. source code: https://github.com/go-vela/vela-kubernetes registry: https://hub.docker.com/r/target/vela-kubernetes usage note: users should refrain from using latest as tag for docker image. it recommended use semantically versioned instead. sample of applying files: steps:- name:kubernetesimage:target/vela-kubernetes:latestpull:alwaysparameters:action:applyfiles:[kubernetes/common, kubernetes/dev/deploy.yml ]sample pretending apply steps: name: image: target/vela-kubernetes:latest pull: always parameters: action: dry_run: true kubernetes/common, patching containers name:kubernetesimage:target/vela-kubernetes:latestpull:alwaysparameters:action:patchfiles:[kubernetes/common, ]containers:- name:sampleimage:alpine:latestsample patch containers: alpine:latest watching status resources: name:kubernetesimage:target/vela-kubernetes:latestpull:alwaysparameters:action:statusstatuses:[sample ]secrets configuring sensitive information your pipeline plain text. internal can secrets substitute these values at runtime: secrets: kube_config config: --- apiversion: v1 kind: config example will add step environment variables: kube_config=&lt;value&gt; external accepts following files authentication: parameter volume configuration /vela/parameters/kubernetes/config, /vela/secrets/kubernetes/config read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. are used configure name required default action perform against n/a parameter_action kubernetes_action cluster false parameter_cluster kubernetes_cluster context parameter_context kubernetes_context content communication with parameter_config kubernetes_config log_level log level info parameter_log_level kubernetes_log_level namespace parameter_namespace kubernetes_namespace path parameter_path kubernetes_path version kubectl cli install v1.17.0 parameter_version kubernetes_version dry_run parameter_dry_run kubernetes_dry_run list directories parameter_files kubernetes_files output parameter_output kubernetes_output parameter_containers kubernetes_containers statuses watch on parameter_statuses kubernetes_statuses timeout total time allowed 5m parameter_timeout kubernetes_timeout until resource completes parameter_watch kubernetes_watch template coming soon! troubleshooting you start by tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/build/logs/",
    "display": "Api/Build/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/logs&#34; response &#34;id&#34;: 1, &#34;step_id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; }, 2, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/service/logs/",
    "display": "Api/Service/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services/:service/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1/logs&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;service_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/step/logs/",
    "display": "Api/Step/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps/:step/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1/logs&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;step_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/go/loops_maps/",
    "display": "Tutorials/Go/Loops maps",
    "title": "Loops with Maps",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template range: {{range pipeline}} t1 {{end}} value of pipeline must be an array, slice, map, channel. has length zero, nothing output; otherwise, dot set successive elements map executed. keys are basic type with defined order, will visited sorted key order. information range/else statements see conditional docs sample let&rsquo;s take look at ranging over template: metadata:template:truesteps:{{range $key, $value := .images }}- name:test{{ $key }}commands:- test ./...image:{{$value }}{{.pull_policy }}ruleset:event:[push, pull_request ]{{end name:buildcommands:- buildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latest{{.pull_policy ]the caller could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:- name:golangtemplate:name:samplevars:pull_policy:&#34;pull: always&#34;images:_latest:golang:latest_1.13:golang:1.13_1.12:golang:1.13which means compiled execution worker is: does not guarantee order maps. you need steps always outputted same use loops slice implementation. version:&#34;1&#34;steps:- name:sample_test_latestcommands:- ./...image:golang:latestpull:alwaysruleset:event:[push, ]- name:sample_test_1.13commands:- ./...image:golang:1.13pull:alwaysruleset:event:[push, name:sample_test_1.12commands:- ./...image:golang:1.12pull:alwaysruleset:event:[push, name:sample_buildcommands:- buildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/starlark/loops_map/",
    "display": "Tutorials/Starlark/Loops map",
    "title": "Loops with Maps",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview from for loops: [[&#34;a&#34;, 1], [&#34;b&#34;, 2], [&#34;c&#34;, 3]]: print(a, i) prints &#34;a 1&#34;, &#34;b 2&#34;, &#34;c 3&#34; sample let&rsquo;s take look at looping over map template: def main(ctx): ruleset &#34;event&#34;: &#34;push&#34;, &#34;pull_request&#34; steps &#34;name&#34;: &#34;install&#34;, &#34;image&#34;: &#34;golang:latest&#34;, &#34;commands&#34;: &#34;go get ./...&#34; ], &#34;pull&#34;: ctx[&#34;vars&#34;][&#34;pull_policy&#34;], &#34;ruleset&#34;: ruleset, name, image ctx[&#34;vars&#34;][&#34;images&#34;].items(): steps.append( &#34;test_%s&#34; image, test &#34;build&#34;, build&#34; &#34;environment&#34;: &#34;cgo_enabled&#34;: &#34;0&#34;, &#34;goos&#34;: &#34;linux&#34;, }, pipeline &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: steps, return the caller of template could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.startype:githubsteps:- name:sampletemplate:name:golangvars:pull_policy:&#34;always&#34;images:_latest:golang:latest_1.13:golang:1.13_1.12:golang:1.12which means compiled execution on worker is: vela does not guarantee order with maps. if you need always be outputted same use loops slice implementation. version:&#34;1&#34;steps:- name:sample_test_latestcommands:- go ./...image:golang:latestpull:alwaysruleset:event:[push, pull_request ]- name:sample_test_1.13commands:- ./...image:golang:1.13pull:alwaysruleset:event:[push, name:sample_test_1.12commands:- ./...image:golang:1.12pull:alwaysruleset:event:[push, name:sample_buildcommands:- buildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/go/loops_slice/",
    "display": "Tutorials/Go/Loops slice",
    "title": "Loops with Slices",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template range: {{range pipeline}} t1 {{end}} value of pipeline must be an array, slice, map, channel. has length zero, nothing output; otherwise, dot set successive elements map executed. keys are basic type with defined order, will visited sorted key order. information range/else statements see conditional docs sample let&rsquo;s take look at ranging over slice template: metadata:template:truesteps:{{range $value := .images }}- name:test_{{ }}commands:- test ./...image:{{$value }}{{$.pull_policy }}ruleset:event:[push, pull_request ]{{end name:buildcommands:- buildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latest{{$.pull_policy ]the caller could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:- name:golangtemplate:name:samplevars:pull_policy:&#34;pull: always&#34;images:[golang:latest, golang:1.13, golang:1.12 ]which means compiled execution worker is: version:&#34;1&#34;steps:- name:sample_test_latestcommands:- ./...image:golang:latestpull:alwaysruleset:event:[push, ]- name:sample_test_golang:1.13commands:- ./...image:golang:1.13pull:alwaysruleset:event:[push, name:sample_test_golang:1.12commands:- ./...image:golang:1.12pull:alwaysruleset:event:[push, name:sample_buildcommands:- buildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/starlark/loops_slice/",
    "display": "Tutorials/Starlark/Loops slice",
    "title": "Loops with Slices",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview from for loops: [1, 2, 3]: print(i) prints &#34;1&#34;, &#34;2&#34;, &#34;3&#34; sample let&rsquo;s take look at ranging over slice template: def main(ctx): ruleset &#34;event&#34;: &#34;push&#34;, &#34;pull_request&#34; steps &#34;name&#34;: &#34;install&#34;, &#34;image&#34;: &#34;golang:latest&#34;, &#34;commands&#34;: &#34;go get ./...&#34; ], &#34;pull&#34;: ctx[&#34;vars&#34;][&#34;pull_policy&#34;], &#34;ruleset&#34;: ruleset, image ctx[&#34;vars&#34;][&#34;images&#34;]: steps.append( &#34;test_%s&#34; image, test &#34;build&#34;, build&#34; &#34;environment&#34;: &#34;cgo_enabled&#34;: &#34;0&#34;, &#34;goos&#34;: &#34;linux&#34;, }, pipeline &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: steps, return the caller of template could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.starformat:starlarktype:githubsteps:- name:sampletemplate:name:golangvars:pull_policy:&#34;always&#34;images:[golang:latest, golang:1.13, golang:1.12 ]which means compiled execution on worker is: version:&#34;1&#34;steps:- name:sample_test_latestcommands:- go ./...image:golang:latestpull:alwaysruleset:event:[push, pull_request ]- name:sample_test_golang:1.13commands:- ./...image:golang:1.13pull:alwaysruleset:event:[push, name:sample_test_golang:1.12commands:- ./...image:golang:1.12pull:alwaysruleset:event:[push, name:sample_buildcommands:- buildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/makisu/",
    "display": "Registry/Pipeline/Makisu",
    "title": "Makisu",
    "content": "description plugin enables you to build publish docker images vela pipeline. source code: https://github.com/go-vela/vela-makisu registry: https://hub.docker.com/r/target/vela-makisu deprecation warning as of may 2021, makisu has been deprecated by the maintainers upstream. therefore, will also be not receive updates. it suggested use different option. at an undecided later date removed entirely. https://github.com/uber-archive/makisu/issues/365 usage note: recommended latest tag for image. users should semantically versioned instead. sample building publishing image: steps:- name:publish_hello-worldimage:target/vela-makisu:latestpull:alwaysparameters:registry:index.docker.iotag:index.docker.io/octocat/hello-worldpushes:[index.docker.io ]sample image without publishing: steps: name: hello world target/vela-makisu:latest pull: always parameters: pushes: index.docker.io tag: index.docker.io/octocat/hello-world:latest with custom tags: replicas: index.docker.io/octocat/hello-world:1 index.docker.io/octocat/hello-world:foobar arguments: build_args: foo=bar index.docker.io/octocat/hello-world redis caching: publish_hello-world redis_cache_options: addr: redis.company.com password: supersecretpassword ttl: 7d repo: secrets refrain from configuring sensitive information your pipeline plain text. can substitute values runtime: secrets: docker_username, docker_password, redis_cache redis_cache: username: octocat parameters supports reading all via environment variables files set file take precedence over following are used configure push process: name required default build_args time arguments dockerfile false n/a commit info #!commit annotations compression on tar built options: (no speed size context deny_list list locations ignored within configuration daemon destination output absolute path http_cache http options caching load loading into post local_cache_ttl live local cache (default 168h0m0s) modify_fs modify outside its internal storage directories preserve_root copying root during after pushes registries server replicas pushing alternative targets i.e. &lt;registry&gt;/&lt;repo&gt;:&lt;tag&gt; directory temp cached layers true target stage mirror registry password communication repository repo username user template coming soon! troubleshooting below common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/deployments/",
    "display": "Docs/Usage/Deployments",
    "title": "Managing Deployments",
    "content": "pipelines can be written with your specific branching methodology mind but when it comes to deployments you often want very intentional triggering change. for reason, vela has deployments, unique build event that triggered directly via on ref (branch, sha, tag). leverages deep integration github which will not only trigger create system of record deployment action. leverage steps like: tip: make sure have the enabled within repo settings additionally, any secret may need must also allowed events. step &#34;all&#34; events- name:all deploymentsimage:alpinecommands:- echo &#34;running deployment!&#34;ruleset:events:[deployment ]# target.# targets value i.e. dev, stage, eng, prod, etc- name:targeted ${vela_deployment}!&#34;ruleset:events:[deployment ]target:[dev, eng ]usage let us look at an example workflow executing repo. should understand following concepts before proceeding: image commands ruleset version:&#34;1&#34;steps:# now we know how control deployment, lets look# adding custom parameters. sometimes do need# target data available# pipeline runs.- name:custom parameters &#34;custom parameter message, ${deployment_parameter_message}&#34;ruleset:events:[deployment ]the cli produce different permutations executing: additional configuration add --org --repo octocat repository environment. --target stage two --parameter &#39;message=hello, var!&#39; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/go/mulitline/",
    "display": "Tutorials/Go/Mulitline",
    "title": "Multiline",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from scalars: scalar literals, newlines are preserved below was taken literal example---| //|| /|| // || ||__ information more types of scalars read sample let&rsquo;s take look at using conditional with variable template: metadata:template:truesteps:{{.test }}- name:buildcommands:- buildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:alwaysruleset:event:[push, pull_request ]the caller template could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:- name:golangtemplate:name:samplevars:test:|- name: test commands: ./... image: golang:latest pull: always ruleset: event: push, ]which means compiled pipeline execution worker is: version:&#34;1&#34;steps:- name:sample_testcommands:- ./...image:golang:latestpull:alwaysruleset:event:[push, ]- name:sample_buildcommands:- buildimage:golang:latestpull:alwaysruleset:event:[push, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/tutorials/node/",
    "display": "Plugins/Tutorials/Node",
    "title": "Node.js",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from node.js documentation: as an asynchronous event-driven javascript runtime, designed build scalable network applications. code plugin using node.js, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes http request the provided input: #!/usr/bin/env node const https require(&#34;https&#34;); url require(&#34;url&#34;); // import method parameter environment process.env.parameter_method; body process.env.parameter_body; uri process.env.parameter_url; capture full myurl url.parse(uri); options method: }; new input req https.request(myurl, options); exit immediately if errors req.on(&#34;error&#34;, () =&gt; process.exit(1); }); write req.write(process.env.parameter_body); send req.end(); example of section go-vela/vela-tutorials repository. image once have executable needed accomplish our plugin&rsquo;s task, dockerfile produce should contain script setup run when executed: fromnode:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.js /bin/vela-sample.jsentrypoint [&#34;node&#34;, &#34;/bin/vela-sample.js&#34;] target/vela-sample docker publishing order pipeline, make sure publish it registry: -t target/vela-sample:node push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with node.js&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:- name:sample pluginimage:target/vela-sample:nodepull:alwaysparameters:url:http://vela.localhost.commethod:postbody:|this "
    },

    {
    "url": "https://jbrockopp.github.io/docs/concepts/pipeline/secrets/origin/",
    "display": "Pipeline/Secrets/Origin",
    "title": "Origin",
    "content": "the origin component part of secret for vela. declaration allows you to pull secrets from non-internal providers via plugins. see what plugins are supported how they integrate with vela build lifecycle page syntax following an example valid component: version: &#34;1&#34; metadata: template: false secrets: name: vault_token key: go-vela/vault_token engine: native type: org origin: vault external image: target/secret-vault parameters: addr: vault.company.com auth_method: token username: octocat items: source: secret/vela path: user steps: test golang username, password commands: cat /vela/secrets/user/name /vela/secrets/user/password more information on plugin usage docs "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/go/vars_platform/",
    "display": "Tutorials/Go/Vars platform",
    "title": "Platform Vars",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview platform variables can be referenced with following syntax: {{ vela &quot;&lt;environment variable&gt;&quot; }} examples &quot;vela_full_repo_name&quot; equates vela_full_repo_name environment variable &quot;full_repo_name&quot; vela_repo_name &quot;vela_build_number&quot; vela_build_number &quot;vela_addr&quot; vela_addr sample let&rsquo;s take look at using template: metadata:template:truesteps:- name:testcommands:- echo &#34;vela_repo_full_name&#34; }}image:alpinepull:alwaysruleset:event:[push, pull_request ]the caller of template could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:- name:sampletemplate:name:echowhich means compiled pipeline execution worker is: version:&#34;1&#34;steps:- name:sample_echocommands:- github/octocatimage:alpinepull:alwaysruleset:event:[push, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/starlark/vars_platform/",
    "display": "Tutorials/Starlark/Vars platform",
    "title": "Platform Vars",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview platform variables can be referenced with the following syntax: ctx['vela']['&lt;resource&gt;']['&lt;name&gt;'] examples ctx[&quot;vela&quot;][&quot;repo&quot;][&quot;name&quot;] equates vela_repo_name environment variable ctx[&quot;vela&quot;][&quot;build&quot;][&quot;number&quot;] vela_build_number ctx[&quot;vela&quot;][&quot;system&quot;][&quot;addr&quot;] vela_addr sample let&rsquo;s take look at using within template: def main(ctx): return &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: step(ctx[&#34;vela&#34;][&#34;repo&#34;][&#34;name&#34;]), ], step(name): &#34;name&#34;: &#34;echo %s&#34; name, &#34;image&#34;: &#34;alpine:latest&#34;, &#39;commands&#39;: name caller of template could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.starformat:starlarktype:githubsteps:- name:buildtemplate:name:samplevars:which means compiled pipeline for execution on worker is: version:1steps:- name:sample_echo hello-worldimage:alpine:latestcommands:- echo hello-world "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/pull_policies/",
    "display": "Docs/Usage/Pull policies",
    "title": "Pull Policies",
    "content": "vela provides the ability to define how when images for secrets, steps, services will be retrieved at runtime. usage following pipeline concepts are being used below: pull steps secrets origin note: please warned that declaration not required. if you do provide declaration, default value of not_present used. version: &#34;1&#34; services: name: redis image: redis:latest pull: always steps: check status alpine:latest commands: can use bash commands in-line set override variables export example=&#34;hello world from team&#34; echo ${example} secrets: origin: private vault target/secret-vault:latest on_start vault_token parameters: addr: vault.example.com auth_method: token username: octocat items: source: secret/docker path: docker will: attempt image, even it exists locally only image doesn&rsquo;t already exist wait until right before starting container "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/tutorials/python/",
    "display": "Plugins/Tutorials/Python",
    "title": "Python",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from python documentation: programming language lets you work quickly integrate systems more effectively. code plugin using python, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes an http request the provided input: #!/usr/bin/env import http.client os urlparse method parameter environment os.getenv[&#39;parameter_method&#39;] body os.getenv[&#39;parameter_body&#39;] url os.getenv[&#39;parameter_url&#39;] capture full uri urlparse(url) new connection conn http.client.httpsconnection(uri.hostname, uri.port) headers added {} send conn.request(method, uri.path, body, headers) response conn.getresponse() output print(response.read().decode(&#34;utf-8&#34;)) example of section go-vela/vela-tutorials repository. image once have script needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup run when executed: frompython:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.py /bin/vela-sample.pyentrypoint [&#34;python&#34;, &#34;/bin/vela-sample.py&#34;] target/vela-sample docker publishing order pipeline, make sure build publish it registry: -t target/vela-sample:python push has benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with python&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:- name:sample pluginimage:target/vela-sample:pythonpull:alwaysparameters:url:http://vela.localhost.commethod:postbody:|this "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/sdk/python/",
    "display": "Reference/Sdk/Python",
    "title": "Python",
    "content": "overview vela python sdk client to perform operations on objects view content new way integrate into applications. for complete list of apis examples, please take look at the reference documentation. requirements. 2.7 3.4+ get build info example below sample go program demonstrating how authenticate with sdk: from __future__ import print_function time vela.rest apiexception pprint configure api key authorization: apikeyauth configuration vela.configuration() configuration.api_key[&#39;authorization&#39;] &#39;your_api_key&#39; configuration.api_key_prefix[&#39;authorization&#39;] &#39;bearer&#39; endpoint configuration.host &#39;https://your-vela-server.example.com&#39; create an instance class api_instance vela.buildsapi(vela.apiclient(configuration)) try: api_response api_instance.get_builds(org=&#34;go-vela&#34;,repo=&#34;sdk-python&#34;) pprint(api_response) except as e: print(&#34;exception when calling buildsapi-&gt;get_builds: %s n&#34; e) "
    },

    {
    "url": "https://jbrockopp.github.io/docs/administration/server/reference/queue/",
    "display": "Server/Reference/Queue",
    "title": "Queue",
    "content": "component responsible for integrating with queue system based off the configuration provided. used by vela server pushing workloads that will be run worker. published to are managed first in, out (fifo) strategy. following options configure component: name description required default environment variables queue.addr full connection string true n/a queue_addr vela_queue_addr queue.cluster configures client cluster false queue_cluster vela_queue_cluster queue.driver type of control operate queue_driver vela_queue_driver queue.pop.timeout timeout requests pop items 60s queue_pop_timeout vela_queue_pop_timeout queue.routes unique channels topics queue_routes vela_queue_routes note: more information on these options, please see reference. drivers available documentation redis uses managing https://redis.io/ from official website: an open source (bsd licensed), in-memory data structure store, as database, cache, message broker. provides structures such strings, hashes, lists, sets, sorted sets range queries, bitmaps, hyperloglogs, geospatial indexes, streams. has built-in replication, lua scripting, lru eviction, transactions, different levels on-disk persistence, high availability via sentinel automatic partitioning cluster. below displays example starting connect queue: docker --detach=true --env=vela_addr=https://vela-server.example.com --env=vela_database_encryption_key=&lt;encryption-key&gt; --env=vela_queue_driver=redis --env=vela_queue_addr=redis://&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;database&gt; --env=vela_port=443 --env=vela_secret=&lt;shared-secret&gt; --env=vela_scm_client=&lt;oauth-client-id&gt; --env=vela_scm_secret=&lt;oauth-client-secret&gt; --env=vela_webui_addr=https://vela.example.com --name=server --publish=80:80 --publish=443:443 --restart=always target/vela-server:latest "
    },

    {
    "url": "https://jbrockopp.github.io/docs/administration/worker/reference/queue/",
    "display": "Worker/Reference/Queue",
    "title": "Queue",
    "content": "component responsible for integrating with queue system based off the configuration provided. used by vela pulling workloads, provided server, that will be run. workloads fetched from are managed first in, out (fifo) strategy. following options to configure component: name description required default environment variables queue.addr full connection string true n/a queue_addr vela_queue_addr queue.cluster configures client cluster false queue_cluster vela_queue_cluster queue.driver type of control operate queue_driver vela_queue_driver queue.pop.timeout timeout requests pop items 60s queue_pop_timeout vela_queue_pop_timeout queue.routes unique channels topics queue_routes vela_queue_routes note: more information on these options, please see worker reference. drivers available documentation redis uses managing https://redis.io/ official website: an open source (bsd licensed), in-memory data structure store, as database, cache, message broker. provides structures such strings, hashes, lists, sets, sorted sets range queries, bitmaps, hyperloglogs, geospatial indexes, streams. has built-in replication, lua scripting, lru eviction, transactions, different levels on-disk persistence, high availability via sentinel automatic partitioning cluster. below displays example starting connect queue: docker run --detach=true --env=vela_queue_driver=redis --env=vela_queue_addr=redis://&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;database&gt; --env=vela_server_addr=https://vela-server.example.com --env=vela_server_secret=&lt;shared-secret&gt; --env=vela_worker_addr=https://vela-worker.example.com --name=worker --publish=80:80 --publish=443:443 --restart=always --volume=/var/run/docker.sock:/var/run/docker.sock target/vela-worker:latest "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/build/remove/",
    "display": "Api/Build/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response github/octocat/1 deleted "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/hook/remove/",
    "display": "Api/Hook/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response github/octocat/1 deleted "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/repo/remove/",
    "display": "Api/Repo/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response github/octocat deleted "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/secret/remove/",
    "display": "Api/Secret/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response repo/github/octocat/foo deleted from native service "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/service/remove/",
    "display": "Api/Service/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response github/octocat/1/1 deleted "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/step/remove/",
    "display": "Api/Step/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response github/octocat/1/1 deleted "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/user/remove/",
    "display": "Api/User/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response octokitty deleted "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/config/remove/",
    "display": "Cli/Config/Remove",
    "title": "Remove",
    "content": "command vela remove config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: providing will entire configuration file. name description environment variables api.addr removes api address field vela_addr, config_addr api.token.access access token vela_access_token, config_access_token api.token.refresh refresh vela_refresh_token, config_refresh_token api.token vela_token, config_token api.version version vela_api_version, config_api_version log.level log level vela_log_level, config_log_level output vela_output, config_output org vela_org, config_org repo vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request response "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/repo/remove/",
    "display": "Cli/Repo/Remove",
    "title": "Remove",
    "content": "command vela remove repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; was deleted "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/secret/remove/",
    "display": "Cli/Secret/Remove",
    "title": "Remove",
    "content": "command vela remove secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo response &#34;foo&#34; was deleted "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/repo/repair/",
    "display": "Api/Repo/Repair",
    "title": "Repair",
    "content": "endpoint patch /api/v1/repos/:org/:repo/repair parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/repair&#34; response github/octocat repaired "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/repo/repair/",
    "display": "Cli/Repo/Repair",
    "title": "Repair",
    "content": "command vela repair repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; repaired "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/admin/repo/",
    "display": "Api/Admin/Repo",
    "title": "Repo",
    "content": "endpoint get /api/v1/admin/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/user/current/repos/",
    "display": "User/Current/Repos",
    "title": "Repos",
    "content": "endpoint get /api/v1/user/source/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/user/source/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/build/restart/",
    "display": "Api/Build/Restart",
    "title": "Restart",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/build/restart/",
    "display": "Cli/Build/Restart",
    "title": "Restart",
    "content": "command vela restart build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, build_org repo repository vela_repo, build_repo number vela_build, build_number output format vela_output, build_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response id: repo_id: number: parent: event: push status: created error: &#34;&#34; populates when platform runs into an error with enqueued: 1563474087 created: 1563474086 started: finished: deploy: clone: https://github.com/github/octocat.git source: https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163 title: received from https://github.com/github/octocat message: first commit... commit: 48afb5bdc41ad69bf22588491333f7cf71135163 sender: octokitty author: branch: master ref: refs/heads/master baseref: host: &#34;company.localhost&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/roles/",
    "display": "Docs/Usage/Roles",
    "title": "Roles",
    "content": "warning at time the only source control provider github. so documentation tailored for those users. vela does not maintain any authentication (authn) authorization (authz) internally, but instead inherits its access from (version control) provider. more information on github&rsquo;s model can be found their documentation. platform roles: admin write read roles admins have full when interacting with cli, ui, api. within github organization option to use orgs allow users permissions all repositories org, fine-grained of adding directly individual repositories. role enables repository, which grants following levels resources: repo build step service log secret "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/tutorials/ruby/",
    "display": "Plugins/Tutorials/Ruby",
    "title": "Ruby",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from ruby documentation: is&hellip; dynamic, open source programming language with focus on simplicity productivity. it has an elegant syntax natural read easy write. code plugin using ruby, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes http request the provided input: #!/usr/bin/env require &#39;net/http&#39; &#39;uri&#39; import method parameter environment env[&#39;parameter_method&#39;] body env[&#39;parameter_body&#39;] url env[&#39;parameter_url&#39;] capture full uri uri(url) new client net::http.new(uri.host, uri.port) send response http.send_request( method, uri.path, body, output puts response.read_body example of section go-vela/vela-tutorials repository. image once have script needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup run when executed: fromruby:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.rb /bin/vela-sample.rbentrypoint [&#34;ruby&#34;, &#34;/bin/vela-sample.rb&#34;] target/vela-sample docker publishing order pipeline, make sure build publish registry: -t target/vela-sample:ruby push added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written ruby&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:- name:sample pluginimage:target/vela-sample:rubypull:alwaysparameters:url:http://vela.localhost.commethod:postbody:|this "
    },

    {
    "url": "https://jbrockopp.github.io/docs/administration/worker/reference/runtime/",
    "display": "Worker/Reference/Runtime",
    "title": "Runtime",
    "content": "component responsible for integrating with runtime environment based off the configuration provided. used by vela executing workload resources managing their lifecycle. following options are to configure component: name description required default variables runtime.config path file false n/a runtime_config vela_runtime_config runtime.driver type of client control operate true docker runtime_driver vela_runtime_driver runtime.namespace namespace use (only kubernetes) runtime_namespace vela_runtime_namespace runtime.privileged-images images allowed run privileged mode target/vela-docker runtime_privileged_images vela_runtime_privileged_images runtime.volumes host volumes mount into runtime_volumes vela_runtime_volumes note: more information on these options, please see worker reference. drivers available documentation uses daemon creating https://docker.io/ kubernetes cluster https://kubernetes.io/ from official website: takes away repetitive, mundane tasks throughout development lifecycle fast, easy portable application desktop cloud. docker’s comprehensive end platform includes uis, clis, apis security that engineered work together across entire delivery below displays an example starting will runtime: --detach=true --env=vela_queue_driver=redis --env=vela_queue_addr=redis://&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;database&gt; --env=vela_runtime_driver=docker --env=vela_server_addr=https://vela-server.example.com --env=vela_server_secret=&lt;shared-secret&gt; --env=vela_worker_addr=https://vela-worker.example.com --name=worker --publish=80:80 --publish=443:443 --restart=always --volume=/var/run/docker.sock:/var/run/docker.sock target/vela-worker:latest enabled not necessary provide order operate. kubernetes, also known as k8s, open-source system automating deployment, scaling, management containerized applications. --env=vela_runtime_driver=kubernetes --env=vela_runtime_config=/root/.kube/config --env=vela_runtime_namespace=vela --volume=/root/.kube/config:/root/.kube/config "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/s3_cache/",
    "display": "Registry/Pipeline/S3 cache",
    "title": "S3 Cache",
    "content": "description plugin enables you to cache build resources an s3 compatible store for vela pipeline. source code: https://github.com/go-vela/vela-s3-cache registry: https://hub.docker.com/r/target/vela-s3-cache usage note: users should refrain from using latest as the tag docker image. it recommended use semantically versioned instead. sample of restoring cache: steps:- name:restore_cacheimage:target/vela-s3-cache:latestpull:alwaysparameters:action:restorebucket:mybucketserver:mybucket.s3-us-west-2.amazonaws.comsample rebuilding name:rebuild_cacheimage:target/vela-s3-cache:latestpull:alwaysparameters:action:rebuildbucket:mybucketserver:mybucket.s3-us-west-2.amazonaws.commount:- .gradlesample while preserving directory structure: name:rebuild_cacheimage:target/vela-s3-cache:latestpull:alwaysparameters:action:rebuildbucket:mybucketserver:mybucket.s3-us-west-2.amazonaws.compreserve_path:truemount:- foo/test1- bar/test2sample flushing name:flushing_cacheimage:target/vela-s3-cache:latestpull:alwaysparameters:action:flushbucket:mybucketserver:mybucket.s3-us-west-2.amazonaws.comsecrets configuring sensitive information your pipeline plain text. internal can secrets substitute these values at runtime: steps: name: restore_cache image: target/vela-s3-cache:latest pull: always secrets: s3_cache_access_key, s3_cache_secret_key parameters: action: restore bucket: mybucket server: mybucket.s3-us-west-2.amazonaws.com access_key: akiaiosfodnn7example secret_key: 123456789qwertyexample example will add step environment variables: s3_cache_access_key=&lt;value&gt; s3_cache_secret_key=&lt;value&gt; external accepts following files authentication: parameter volume configuration access_key /vela/parameters/s3-cache/access_key, /vela/secrets/s3-cache/access_key secret_key /vela/parameters/s3-cache/secret_key, /vela/secrets/s3-cache/secret_key session_token /vela/parameters/s3-cache/session_token, /vela/secrets/s3-cache/session_token read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. bucket with expected be created beforehand. used configure image actions: name required default accelerated_endpoint accelerated instance communicate false n/a parameter_accelerated_endpoint s3_cache_accelerated_endpoint access key communication true parameter_access_key s3_cache_access_key aws_access_key_id action perform against parameter_action s3_cache_action build_branch branch repository by parameter_build_branch vela_build_branch parameter_bucket s3_cache_bucket log_level log level info parameter_log_level s3_cache_log_level org parameter_org vela_repo_org path custom object(s) parameter_path s3_cache_path prefix parameter_prefix s3_cache_prefix repo parameter_repo vela_repo_name repo_branch parameter_repo_branch vela_repo_branch parameter_secret_key aws_secret_access_key server parameter_server s3_cache_server session token parameter_session_token s3_cache_session_token aws_session_token are filename object archive.tgz parameter_filename s3_cache_filename timeout call 10m parameter_timeout s3_cache_timeout rebuild preserve_path whether preserve relative structure during tar process parameter_preserve_path s3_preserve_path mount directories locations parameter_mount s3_cache_mount flush age delete objects past specific (i.e. 60m, 8h) 336h parameter_age s3_cache_age template coming soon! troubleshooting start tuning logs being displayed: log_level: trace below list common problems how solve them: invalid duration value error may look like this: could not parse &quot;14d &quot; flag flush.age: time: unknown unit &quot;d parsed go&rsquo;s time.parseduration function. only hours, minutes, so on smaller time units supported; days cause unless added subsequent versions go after v1.16, which unlikely. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/administration/server/reference/scm/",
    "display": "Server/Reference/Scm",
    "title": "SCM",
    "content": "component responsible for integrating with source control management (scm) system based off the configuration provided. scm used by vela both authentication authorization of interactions performed within application. following options are to configure component: name description required default environment variables scm.addr fully qualified url true https://github.com scm_addr vela_scm_addr scm.client client id from generated oauth application on n/a scm_client vela_scm_client scm.context message set commit status continuous-integration/vela scm_context vela_scm_context scm.driver type operate github scm_driver vela_scm_driver scm.scopes permission scopes apply credentials repo, repo:status, user:email, read:user, read:org scm_scopes vela_scm_scopes scm.secret secret scm_secret vela_scm_secret scm.webhook.addr webhooks send requests false address server ($vela_addr) scm_webhook_addr vela_scm_webhook_addr note: more information these options, please see reference. drivers available documentation uses githug enterprise https://github.com/about/ official website: where world builds software. millions developers companies build, ship, maintain their software github—the largest most advanced development platform world. below displays an example creating application: warning: homepage should match vela_addr variable provided clusters without ui. otherwise, vela_webui_addr server. callback contain /authenticate suffix. your organization&rsquo;s private copy contained virtual appliance, hosted premises cloud, that you control. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/administration/server/reference/secret/",
    "display": "Server/Reference/Secret",
    "title": "Secret",
    "content": "component optional responsible for integrating with an external secret system based off the configuration provided. used by vela storing sensitive application data at rest. default, will use database to store if other configured. note: any stored be encrypted using advanced encryption standard (aes). following options are configure component: name description required default environment variables secret.vault.addr fully qualified url hashicorp vault instance true n/a secret_vault_addr vela_secret_vault_addr secret.vault.auth-method authentication method obtain token from false secret_vault_auth_method vela_secret_vault_auth_method secret.vault.aws-role role connect auth/aws/login endpoint secret_vault_aws_role vela_secret_vault_aws_role secret.vault.driver enables as engine secret_vault vela_secret_vault secret.vault.prefix prefix k/v secrets secret_vault_prefix vela_secret_vault_prefix secret.vault.renewal frequency renew 30m secret_vault_renewal vela_secret_vault_renewal secret.vault.token access secret_vault_token vela_secret_vault_token secret.vault.version version backend secret_vault_version vela_secret_vault_version more information on these options, please see server reference. drivers available documentation uses rest https://www.vaultproject.io/ official website: you secure, tightly control tokens, passwords, certificates, keys protecting ui, cli, http api. below displays example of starting that instance: docker run --detach=true --env=vela_addr=https://vela-server.example.com --env=vela_database_encryption_key=&lt;encryption-key&gt; --env=vela_queue_driver=redis --env=vela_queue_addr=redis://&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;database&gt; --env=vela_port=443 --env=vela_secret=&lt;shared-secret&gt; --env=vela_secret_vault=true --env=vela_secret_vault_addr=https://vault.example.com --env=vela_secret_vault_token=&lt;vault-token&gt; --env=vela_scm_client=&lt;oauth-client-id&gt; --env=vela_scm_secret=&lt;oauth-client-secret&gt; --env=vela_webui_addr=https://vela.example.com --name=server --publish=80:80 --publish=443:443 --restart=always target/vela-server:latest "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/admin/secret/",
    "display": "Api/Admin/Secret",
    "title": "Secret",
    "content": "endpoint get /api/v1/admin/secrets permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/secrets&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: null, &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] }, 2, &#34;bar&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/admin/service/",
    "display": "Api/Admin/Service",
    "title": "Service",
    "content": "endpoint get /api/v1/admin/services permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/services&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 }, &#34;clone&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/skipping_build/",
    "display": "Docs/Usage/Skipping build",
    "title": "Skipping a Build",
    "content": "to prevent vela from running build for commit, add one of the following your commit title message: [skip ci] [ci skip] vela] [vela ***no_ci*** note: you can use upper lower case. will receive payload source control provider return 200 response with reason why was not triggered. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/slack/",
    "display": "Registry/Pipeline/Slack",
    "title": "Slack",
    "content": "description plugin enables you to send data slack channel. source code: https://github.com/go-vela/vela-slack registry: https://hub.docker.com/r/target/vela-slack usage note: users should refrain from using latest as the tag for docker image. it recommended use semantically versioned instead. sample of sending message: steps:- name:messageimage:target/vela-slack:latestpull:alwaysparameters:text:&#34;hello world!&#34;sample message with formatting: steps: name: message-with-formatting image: target/vela-slack:latest pull: not_present parameters: text: &#34;hello world!&#34; repo {{ .repositoryname }}!&#34; attachment file: message-with-attachment secrets: webhook filepath: slack_attachment.json content slack_attachment.json: &#34;attachments&#34;: &#34;fallback&#34;: &#34;required plain-text summary attachment.&#34;, &#34;color&#34;: &#34;#36a64f&#34;, &#34;pretext&#34;: &#34;optional text that appears above block&#34;, &#34;author_name&#34;: &#34;bobby tables&#34;, &#34;author_link&#34;: &#34;http://flickr.com/bobby/&#34;, &#34;author_icon&#34;: &#34;http://flickr.com/icons/bobby.jpg&#34;, &#34;title&#34;: &#34;slack api documentation&#34;, &#34;title_link&#34;: &#34;https://api.slack.com/&#34;, &#34;text&#34;: &#34;build: .buildnumber }}&#34;, &#34;fields&#34;: &#34;priority&#34;, &#34;value&#34;: &#34;high&#34;, &#34;short&#34;: false ], &#34;image_url&#34;: &#34;http://my-website.com/path/to/image.jpg&#34;, &#34;thumb_url&#34;: &#34;http://example.com/path/to/thumb.png&#34;, &#34;footer&#34;: api&#34;, &#34;footer_icon&#34;: &#34;https://platform.slack-edge.com/img/default_application_icon.png&#34;, &#34;ts&#34;: 123456789 any variables within attachments file must be saved format json file. configuration below pulled almost directly builder example. secrets configuring sensitive information your pipeline plain text. internal accepts following parameters authentication: parameter environment variable parameter_webhook, slack_webhook can vela substitute these values at runtime: always webhook: http://slack.example.com example will add secret step variables: slack_webhook=&lt;value&gt; external files volume /vela/parameters/slack/webhook, /vela/secrets/slack/webhook read value stored /vela/secrets/ supports reading all via files. set take precedence over environment. are used configure name required default channel n/a parameter_channel slack_channel filepath path parameter_filepath slack_filepath icon_emoji emoji icon parameter_icon_emoji slack_icon_emoji icon_url url parameter_icon_url slack_icon_url log_level log level true info parameter_log_level slack_log_level top display parameter_text slack_text thread_ts timestamp thread post parameter_thread_ts slack_thread_ts parameter_webhook template coming soon! troubleshooting start by tuning logs being displayed: log_level: trace list common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/start_build/",
    "display": "Docs/Usage/Start build",
    "title": "Start a Build",
    "content": "if you&rsquo;ve followed the documentation for enabling repo wrote pipeline (here are some example pipelines), all that should be left to push your repo. build does not trigger when change repo, check webhook response see there an error. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/admin/step/",
    "display": "Api/Admin/Step",
    "title": "Step",
    "content": "endpoint get /api/v1/admin/steps permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/steps&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; }, &#34;clone&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/environment/substitution/",
    "display": "Reference/Environment/Substitution",
    "title": "Substitution",
    "content": "vela imports substitution library to provide the ability expand, substitute, repository build metadata facilitate dynamic pipeline configurations. string operations syntax description ${var^} var with uppercase first char ${var^^} all ${var,} lowercase ${var,,} ${var:position} substring ${var:position:length} length ${var#substring} find replace ${var##substring} ${var%substring} ${var%%substring} suffix removal ${var/substring/replacement} ${var//substring/replacement} ${var/#substring/replacement} ${var/%substring/replacement} ${#var} ${var=default} default ${var:=default} ${var:-default} escaping tip: expressions are evaluated before yaml parsed. if you do not want system evaluate an expression it must be escaped. version: &#34;1&#34; steps: name: echo commands: does escape evaluation ${vela_build_commit} by adding double &#39;$$&#39; $${vela_build_commit} "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/tutorials/starlark/vars_template/",
    "display": "Tutorials/Starlark/Vars template",
    "title": "Template Vars",
    "content": "we recommend reviewing starlark spec before attempting to create template. overview template variables can be referenced with the following syntax: ctx['vars'][&lt;name&gt;] sample let&rsquo;s take look at using within template: def main(ctx): steps [step(x, ctx[&#34;vars&#34;][&#34;pull_policy&#34;], ctx[&#34;vars&#34;][&#34;commands&#34;]) for ctx[&#34;vars&#34;][&#34;tags&#34;]] pipeline &#39;version&#39;: &#39;1&#39;, &#39;steps&#39;: steps, return step(tag, pull_policy, commands): &#34;name&#34;: &#34;build %s&#34; tag, &#34;image&#34;: &#34;golang:%s&#34; &#34;pull&#34;: &#39;commands&#39;: commands.values(), caller of could like: version:&#34;1&#34;templates:- name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.starformat:starlarktype:githubsteps:- name:buildtemplate:name:samplevars:tags:[latest, &#34;1.14&#34;, &#34;1.15&#34;]pull_policy:alwayscommands:test:&#34;go test ./...&#34;build:&#34;go build&#34;which means compiled execution on worker is: version:1steps:- name:sample_build latestimage:golang:latestpull:alwayscommands:- go ./...- build- 1.14image:golang:1.14pull:alwayscommands:- 1.15image:golang:1.15pull:alwayscommands:- build "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/pipeline/templates/",
    "display": "Api/Pipeline/Templates",
    "title": "Templates",
    "content": "endpoint get /api/v1/pipelines/:org/:repo/templates parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider output format pipeline templates permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve configuration 401 user does not have proper 404 500 system error while retrieving sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat/templates&#34; response some_template:link:https://github.com/github/octocat/blob/master/template.ymlname:some_templatesource:github.com/github/octocat/template.ymltype:github{ &#34;some_template&#34;: &#34;link&#34;: &#34;https://github.com/github/octocat/blob/master/template.yml&#34;, &#34;name&#34;: &#34;some_template&#34;, &#34;source&#34;: &#34;github.com/github/octocat/template.yml&#34;, &#34;type&#34;: &#34;github&#34; }, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/pipeline/terraform/",
    "display": "Registry/Pipeline/Terraform",
    "title": "Terraform",
    "content": "description plugin enables you to run terraform against providers vela pipeline. source code: https://github.com/go-vela/vela-terraform registry: https://hub.docker.com/r/target/vela-terraform usage note: users should refrain from using latest as the tag for docker image. it recommended use semantically versioned instead. sample of adding installing version: steps:- name:applyimage:target/vela-terraform:latestpull:alwaysparameters:action:applyauto_approve:true# required versions 0.12.xversion:0.11.7sample init options configuration: 0.12.xinit_options:get_plugins:truesample applying 0.12.xsample destroying name:destroyimage:target/vela-terraform:latestpull:alwaysparameters:action:destroyauto_approve:true# formatting configuration files: name:fmtimage:target/vela-terraform:latestpull:alwaysparameters:action:fmtsample planning name:planimage:target/vela-terraform:latestpull:alwaysparameters:action:plansample validating name:validateimage:target/vela-terraform:latestpull:alwaysparameters:action:validatesecrets configuring sensitive information your pipeline plain text. internal can secrets substitute these values at runtime: steps: name: apply image: target/vela-terraform:latest pull: always secrets: terraform_username, terraform_password parameters: action: auto_approve: true 0.12.x username: octocat password: supersecretpassword example will add step environment variables: terraform_username=&lt;value&gt; terraform_password=&lt;value&gt; external accepts following files authentication: parameter volume password /vela/parameters/terraform/password, /vela/secrets/terraform/password username /vela/parameters/terraform/username, /vela/secrets/terraform/username read secret stored /vela/secrets/ parameters supports reading all via variables files. any set file take precedence over environment. commands be invoked current directory by default. are used configure name default action perform with n/a parameter_action terraform_action init_options operation false parameter_init_options terraform_init_options log_level log level info parameter_log_level terraform_log_level machine netrc communicate github.com parameter_machine terraform_machine vela_netrc_machine authentication parameter_password vela_netrc_password user parameter_username terraform_username vela_netrc_username version cli 0.12.26 parameter_version terraform_version within backend backend_configs merged what force_copy suppress prompts about copying state data from_module copy contents given module into target before initialization get download modules get_plugins missing plugins input ask if not directly lock when locking supported lock_timeout duration retry no_color disables colors output plugin_dirs containing binaries; overrides search paths reconfigure backend, ignoring saved upgrade install allowed configured constraints verify_plugins verify authenticity integrity automatically downloaded command uses defaults overridden config. auto_approve skip interactive approval resources parameter_auto_approve terraform_auto_approve backup path existing parameter_backup terraform_backup parameter_directory terraform_directory parameter_lock terraform_lock parameter_lock_timeout terraform_lock_timeout parameter_no_color terraform_no_color parallelism number concurrent operations walks its graph parameter_parallelism terraform_parallelism refresh update prior checking differences parameter_refresh terraform_refresh save parameter_state terraform_state state_out write updated parameter_state_out terraform_state_out resource parameter_target terraform_target vars map pass (&lt;key&gt;=&lt;value&gt;) parameter_vars terraform_vars var_files list var parameter_var_files terraform_var_files destroy format fmt check validate formatted parameter_check terraform_check diff diffs changes parameter_diff terraform_diff whose differs parameter_list terraform_list result instead stdout parameter_write terraform_write plan managed parameter_destroy terraform_destroy detailed_exit_code return detailed exit codes exits parameter_detailed_exit_code terraform_detailed_exit_code parameter_input terraform_input module_depth specifies depth show parameter_module_depth terraform_module_depth check_variables whether have been specified parameter_check_variables terraform_check_variables template coming soon! troubleshooting start tuning logs being displayed: log_level: trace also instruct verbose logging: environment: tf_log: below common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/workspace/",
    "display": "Docs/Usage/Workspace",
    "title": "Understanding the Workspace",
    "content": "vela uses shared volume model between steps to allow file system during the build process. these volumes should be considered ephemeral sense once completes execution all data via being destroyed. working directory ensures configuration, code, dependencies, compiled binaries are persisted steps. default workspace attached every unique matches below pattern: source: syntax /vela/src/&lt;source_provider/&lt;source org&gt;/&lt;source repo&gt; example /vela/src/github.com/go-vela/hello-world secrets: /vela/secrets/&lt;path&gt;/&lt;key&gt; /vela/secrets/github/username/ /vela/secrets/github/password/ parameters: /vela/parameters/&lt;path&gt;/&lt;key&gt; /vela/parameters/github/repo/settings/topics before you use parameters check plugin authors docs ensure it has support read from /vela/parameters would equivalent following docker commands executed: create build-workspace run --volume=build-workspace:/vela/ &lt;image&gt; cloning automatically checks out repository into local that mounted each container. generally referred as workspace, which defines by build. git clone https://github.com/go-vela/hello-world.git &lt;workspace&gt; cases where your needs special configuration add step at beginning of pipeline adding desired behavior. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/build/update/",
    "display": "Api/Build/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;message&#34;: &#34;this an updated message&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, message&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/hook/update/",
    "display": "Api/Hook/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;failure&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/repo/update/",
    "display": "Api/Repo/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;allow_tag&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;counter&#34;: 0, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/secret/update/",
    "display": "Api/Secret/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;events&#34;: [&#34;push&#34;, &#34;tag&#34;] curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/service/update/",
    "display": "Api/Service/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;failure&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/step/update/",
    "display": "Api/Step/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;failure&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/user/current/update/",
    "display": "User/Current/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/user permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;admin&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/user&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/user/update/",
    "display": "Api/User/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;admin&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/config/update/",
    "display": "Cli/Config/Update",
    "title": "Update",
    "content": "command vela update config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables api.addr updates api address field vela_addr, config_addr api.token.access access token vela_access_token, config_access_token api.token.refresh refresh vela_refresh_token, config_refresh_token api.token vela_token, config_token api.version version vela_api_version, config_api_version log.level log level vela_log_level, config_log_level output vela_output, config_output org vela_org, config_org repo vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --org github response api: addr: https://vela-server.localhost access_token: supersecretaccesstoken refresh_token: supersecretrefreshtoken version: v1 log: level: info secret: {} org: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/repo/update/",
    "display": "Cli/Repo/Update",
    "title": "Update",
    "content": "command vela update repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name link full url vela_link, repo_link branch default vela_branch, repo_branch clone vela_clone, repo_clone visibility access level required view vela_visibility, repo_visibility timeout max time allowed per build vela_timeout, repo_timeout counter set value new number vela_counter, repo_counter private disables public vela_private, repo_private trusted elevates permissions builds vela_trusted, repo_trusted active enables/disables vela_active, repo_active event events trigger vela_events, repo_events output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --event tag response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 counter: visibility: private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/secret/update/",
    "display": "Cli/Secret/Update",
    "title": "Update",
    "content": "command vela update secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name value vela_value, secret_value image build image(s) access vela_images, secret_images event event(s) vela_events, secret_events commands allows step with vela_commands, secret_commands file secret(s) vela_file, secret_file output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo --value baz response &#34;foo&#34; was updated advanced input from updating single-line multi-line using symbol. syntax @/path/to/file example @$home/tmp/secret.txt secrets multiple filename parameter. -f secret.yml single yaml document ---metadata:version:v1engine:nativesecrets:- org:octocatrepo:githubname:foovalue:bartype:repoimages:- golang:latestevents:- push- pull_request- org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:- pull_requestmultiple org:githubrepo:octocatname:foovalue:bartype:repoimages:- pull_request---metadata:version:v1engine:vaultsecrets:- pull_request "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/admin/user/",
    "display": "Api/Admin/User",
    "title": "User",
    "content": "endpoint get /api/v1/admin/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/users&#34; response &#34;id&#34;: 2, &#34;name&#34;: &#34;octocat&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false }, 1, &#34;octokitty&#34;, "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/environment/",
    "display": "Docs/Usage/Environment",
    "title": "Using the Environment",
    "content": "vela provides the ability to define environment variables scoped individual steps, services secrets. additionally, if you need global can set it at parent have injected all containers. please note designed be unique per container. does inject variety of default values from build, repo user information. defaults: container steps only usage following pipeline concepts are being used below: secrets origin note: warned that ${variable} expressions subject pre-processing. do not want pre-processor evaluate your expression must escaped. version: &#34;1&#34; environment: global_example: hello, world globally! services: name: redis local_example: world! image: redis:latest steps: check status commands: use bash commands in-line override export example=&#34;hello team&#34; echo ${example} ${global_example} secrets: origin: private vault target/secret-vault:latest example: vault_token parameters: addr: vault.example.com auth_method: token username: octocat items: source: secret/docker path: docker by injection affects containers ran within pipeline. however, some types receive configuration limit which get them adding declaration into metadata. valid for metadata yaml tag metadata: longer available local shell since &#34;secrets&#34; was removed as value metadata.environment block. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/pipeline/validate/",
    "display": "Api/Pipeline/Validate",
    "title": "Validate",
    "content": "endpoint post /api/v1/pipelines/:org/:repo/validate parameters the following are used to configure endpoint: name description org of organization repo repository ref file for fetching from source provider permissions coming soon! responses status code 200 indicates request has succeeded 400 unable retrieve validate pipeline configuration templates 401 user does not have proper 404 500 system error while retrieving validating sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x get -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/pipelines/github/octocat/validate&#34; response &quot;pipeline valid&quot; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/pipeline/validate/",
    "display": "Cli/Pipeline/Validate",
    "title": "Validate",
    "content": "command vela validate pipeline &lt;parameters...&gt; &lt;arguments...&gt; for more information, please run --help. parameters the following are used to configure command: name description environment variables file of vela_file, pipeline_file path vela_path, pipeline_path permissions coming soon! sample section assumes you have already installed setup cli. install cli, review installation documentation. authentication request response &#34;.vela.yml&#34; valid "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/environment/variables/",
    "display": "Reference/Environment/Variables",
    "title": "Variables",
    "content": "container defaults the following environment variables are injected into every step, service, secret container. build key value explanation vela_build_author octocat author from source commit vela_build_author_email octocat@github.com email vela_build_base_ref refs/heads/dev reference base vela_build_branch main branch vela_build_channel vela queue channel was published to vela_build_clone https://github.com/octocat/hello-world.git clone url for repository triggered vela_build_commit 7fd1a60b01f91b314f59955a4e4d4e80d8edf11d sha vela_build_created 1556720958 unix timestamp representing creation time vela_build_distribution linux distribution where executed vela_build_enqueued enqueued vela_build_event push webhook event that vela_build_host vela-worker-1 fully qualified domain name of worker on vela_build_link https://vela-server.localhost/octocat/hello-world/1 link ui vela_build_message merge pull request #6 octocat/patch-1 message vela_build_number number vela_build_parent previous vela_build_ref refs/heads/main vela_build_runtime docker runtime vela_build_sender nealcoleman user who vela_build_started 1556730001 start vela_build_source https://github.com/octocat/hello-world/commit/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d full vela_build_status success status vela_build_title received https://github.com/octocat/hello-world title vela_build_workspace /vela/src/github.com/octocat/hello-world working directory comment only table includes available during event. vela_build_pull_request populated vela_pull_request deployment all custom parameters passed with deployment_parameter_ prefix key. vela_build_target production target vela_deployment pull_request vela_pull_request_source dev vela_pull_request_target tag vela_build_tag v1.0.0 true vela_addr vela-server.localhost server vela_channel vela_database postgres database connected vela_host vela_queue redis vela_runtime vela_source github vela_version v0.1.0 version vela_workspace /vela/src/github.com/github/octocat/hello-world ci enabled vela_repo_active active setting vela_repo_allow_comment false vela_repo_allow_deploy deploy vela_repo_allow_pull vela_repo_allow_push vela_repo_allow_tag vela_repo_branch default vela_repo_clone vela_repo_full_name octocat/hello-world vela_repo_link direct vela_repo_name hello-world vela_repo_org org vela_repo_private privacy vela_repo_timeout 30 timeout vela_repo_trusted trusted vela_repo_visibility public visibility vela_user_active vela_user_admin admin platform vela_user_favorites &quot;octocat/hello-world&quot; favorites starred vela_user_name handle step vela_step_created vela_step_distribution vela_step_exit_code exit code when starts vela_step_host vela_step_image target/vela-git:latest image vela_step_name vela_step_number within pipeline vela_step_runtime vela_step_stage stage belongs vela_step_started vela_step_status service vela_service_created vela_service_distribution vela_service_exit_code vela_service_host vela_service_image vela_service_name vela_service_number vela_service_runtime vela_service_started vela_service_status "
    },

    {
    "url": "https://jbrockopp.github.io/docs/plugins/registry/secret/vault/",
    "display": "Registry/Secret/Vault",
    "title": "Vault",
    "content": "description plugin enables the ability pull secrets from vault into secret mount within vela pipeline. source code: https://github.com/go-vela/secret-vault registry: https://hub.docker.com/r/target/secret-vault usage sample of writing using token authentication: secrets:- origin:name:vaultimage:target/vela/secret-vault:latestparameters:addr:vault.company.comtoken:supersecretvaulttokenauth_method:tokenitems:# written to path: &#34;/vela/secrets/docker/&lt;key&gt;&#34;- source:secret/vela/usernamepath:dockersample reading ldap secrets: origin: name: image: target/vela/secret-vault:latest parameters: addr: vault.company.com username: octocat password: supersecretpassword token: supersecretvaulttoken auth_method: items: &#34;/vela/secrets/docker/&lt;key&gt;&#34; source: secret/vela/username docker authentication with verbose logging: log_level: trace note: users should refrain configuring sensitive information your pipeline plain text. used must exist as secrets. you can use substitute values at runtime: repo created vault_token example method secret: &quot;/vela/secrets/docker/&lt;key&gt;&quot; parameters following are configure name required default addr address instance true n/a auth_method for interfacing (i.e. token, ldap) log_level set log level info password server false username read reading: items pretending perform apply template coming soon! troubleshooting below list common problems how solve them: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/build/view/",
    "display": "Api/Build/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/deployment/view/",
    "display": "Api/Deployment/View",
    "title": "View",
    "content": "endpoint get /api/v1/deployments/:org/:repo/:deployment parameters the following are used to configure endpoint: name description org of organization repo repository deployment number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;ref&#34;: &#34;master&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;target&#34;: &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/hook/view/",
    "display": "Api/Hook/View",
    "title": "View",
    "content": "endpoint get /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/repo/view/",
    "display": "Api/Repo/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;counter&#34;: 0, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/secret/view/",
    "display": "Api/Secret/View",
    "title": "View",
    "content": "endpoint get /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/service/view/",
    "display": "Api/Service/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/step/view/",
    "display": "Api/Step/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/user/current/view/",
    "display": "User/Current/View",
    "title": "View",
    "content": "endpoint get /api/v1/user permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/user&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/api/user/view/",
    "display": "Api/User/View",
    "title": "View",
    "content": "endpoint get /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/build/view/",
    "display": "Cli/Build/View",
    "title": "View",
    "content": "command vela view build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, build_org repo repository vela_repo, build_repo number vela_build, build_number output format vela_output, build_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response id: repo_id: number: parent: event: push status: created error: &#34;&#34; populates when platform runs into an error with enqueued: 1563474077 created: 1563474076 started: finished: deploy: clone: https://github.com/github/octocat.git source: https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163 title: received from https://github.com/github/octocat message: first commit... commit: 48afb5bdc41ad69bf22588491333f7cf71135163 sender: octokitty author: branch: master ref: refs/heads/master baseref: host: &#34;company.localhost&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/config/view/",
    "display": "Cli/Config/View",
    "title": "View",
    "content": "command vela view config &lt;arguments...&gt; for more information, you can run --help. permissions coming soon! sample section assumes have already installed setup the cli. to install cli, please review installation documentation. authentication request response api: addr: https://vela-server.localhost access_token: supersecretaccesstoken refresh_token: supersecretrefreshtoken version: v1 log: level: info secret: {} "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/deployment/view/",
    "display": "Cli/Deployment/View",
    "title": "View",
    "content": "command vela view deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, deployment_org repo repository vela_repo, deployment_repo number vela_deployment, deployment_number output format vela_output, deployment_output also supports setting via configuration file: please review cli config documentation. sample section assumes have already installed setup cli. install cli, installation authentication request with add &#34;github&#34; &#34;octocat&#34; --org github --repo octocat --deployment response generated from successful id: repo_id: url: https://api.github.com/repos/github/octocat/deployments/1 user: commit: 48afb5bdc41ad69bf22588491333f7cf71135163 ref: master task: deploy:vela target: production description: examples examples: 1. details repository. myorg myrepo 2. json output. --output 3. set. "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/hook/view/",
    "display": "Cli/Hook/View",
    "title": "View",
    "content": "command vela view hook &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, hook_org repo repository vela_repo, hook_repo number vela_hook, hook_number output format vela_output, hook_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --hook response id: repo_id: build_id: number: source_id: c8da1302-07d6-11ea-882f-4893bca275b8 created: 1563475419 host: github.com event: push branch: master error: status: success link: https://github.com/github/octocat/settings/hooks/1 "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/log/view/",
    "display": "Cli/Log/View",
    "title": "View",
    "content": "command vela view log &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, log_org repo repository vela_repo, log_repo build number vela_build, log_build service vela_service, log_service step vela_step, log_step output format logs vela_output, log_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --step response git init initialized empty /vela/src/github.com/github/octocat/.git/ remote add origin https://github.com/github/octocat.git --verbose (fetch) (push) fetch --no-tags refs/heads/master from https://github.com/github/octocat branch master -&gt; fetch_head [new branch] origin/master reset --hard afafce5e33a8efd4340613b31a953107d6dec3a3 head now at afafce5 dummy commit "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/repo/view/",
    "display": "Cli/Repo/View",
    "title": "View",
    "content": "command vela view repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 counter: visibility: public private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/secret/view/",
    "display": "Cli/Secret/View",
    "title": "View",
    "content": "command vela view secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo response id: org: repo: team: &#34;&#34; name: value: type: images: null events: push pull_request "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/service/view/",
    "display": "Cli/Service/View",
    "title": "View",
    "content": "command vela view service &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, service_org repo repository vela_repo, service_repo build number vela_build, service_build vela_service, service_number output format vela_output, service_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --service response id: build_id: repo_id: number: name: clone status: success error: &#34;&#34; exitcode: created: 1561748980 started: 1561748979 finished: 1561748981 host: &#34;worker.host.com&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/reference/cli/step/view/",
    "display": "Cli/Step/View",
    "title": "View",
    "content": "command vela view step &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, step_org repo repository vela_repo, step_repo build number vela_build, step_build vela_step, step_number output format vela_output, step_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --step response id: build_id: repo_id: number: name: clone status: success error: &#34;&#34; populates when platform runs into an error with exitcode: created: 1561748980 started: 1561748979 finished: 1561748981 host: &#34;worker.host.com&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://jbrockopp.github.io/docs/usage/plugin/",
    "display": "Docs/Usage/Plugin",
    "title": "Working with plugins",
    "content": "note: the following plugins are used within example kaniko vault typically, configured as step pipeline should accept their configuration via environment variables. below shows secret plugin working together to publish an image registry: version:&#34;1&#34;steps:- name:pluginimage:target/vela-dockerpull:alwaysparameters:registry:index.docker.iorepo:index.docker.io/octocat/hello-worldsecrets:- name:vault_tokenkey:go-vela/vault_tokenengine:nativetype:org- origin:name:pluginimage:target/secret-vaultpull:alwayssecrets:[vault_token ]parameters:addr:vault.company.comauth_method:tokenitems:- source:secret/dockerpath:dockerwe pass these variables vela using parameters block. any variable passed block, will be injected into parameter_&lt;variable&gt;: version: &#34;1&#34; steps: name: docker image: target/vela-docker pull: always parameters: index.docker.io repo: index.docker.io/octocat/hello-world secrets: vault_token key: go-vela/vault_token engine: native type: org origin: target/secret-vault addr: vault.company.com auth_method: token items: source: secret/docker path: from above example, would added containers: docker: parameter_registry=index.docker.io parameter_repo=index.docker.io/octocat/hello-world vault: parameter_addr=index.docker.io parameter_auth_method=index.docker.io/octocat/hello-world parameter_items={&quot;items&quot;: [{&quot;source&quot;: &quot;secret/docker&quot;}],&quot;path&quot;: &quot;docker&quot;} "
    },

    {
    "url": "https://jbrockopp.github.io/docs/templates/working_with/",
    "display": "Docs/Templates/Working with",
    "title": "Working with Templates",
    "content": "warning it highly recommended before reviewing the below content to have solid grasp on vela&rsquo;s core concepts that are explored while taking vela tour). when writing new template getting feedback can be very painful process. provides few methods get quickly ensure you&rsquo;re expands pipeline you expect run. main for seeing expanded pipelines are: endpoints (which used via ui cli) cli validation (vela validate pipeline) method allows evaluate your exists within vcs system. most commonly referenced build page tab. additionally, also interact with api if trying create more elaborate workflows. docs workflow was mentioned above has variety of local remote validation. all them designed help identify areas need improved should speed up development. available methods: will continue only file server --remote --org myorg --repo myrepo allow someone note: requires user provide auth --template override `source:` use testing --template-file name:path/to/file "
    }

]}
